{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/core.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addP5PropsAndMethods",
          "members": [
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas."
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })"
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered."
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              }
            },
            {
              "kind": "field",
              "name": "change"
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property."
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name"
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "repeat"
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element."
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children."
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ]
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes."
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "addColorMethods",
                "module": "src/methods/color_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addMathMethods",
                "module": "src/methods/math_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "addStorage",
                "module": "src/properties/data_props.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addColorMethods",
              "module": "/src/methods/color_methods"
            },
            {
              "name": "addWebGLMethods",
              "module": "/src/methods/3d_methods"
            },
            {
              "name": "addEventProps",
              "module": "/src/properties/event_props"
            },
            {
              "name": "addCollide",
              "module": "/src/methods/collide_methods"
            },
            {
              "name": "addMathMethods",
              "module": "/src/methods/math_methods"
            },
            {
              "name": "addMathProps",
              "module": "/src/properties/math_props"
            },
            {
              "name": "addStorage",
              "module": "/src/properties/data_props"
            },
            {
              "name": "addDataMethods",
              "module": "/src/methods/data_methods"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "P5Element",
          "mixins": [
            {
              "name": "addP5PropsAndMethods",
              "module": "src/core.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "addColorMethods",
                "module": "src/methods/color_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addMathMethods",
                "module": "src/methods/math_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "addStorage",
                "module": "src/properties/data_props.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RenderedElement",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\"]",
              "privacy": "private",
              "description": ""
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": ""
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "P5Element",
            "module": "src/core.js"
          }
        },
        {
          "kind": "class",
          "description": "The blank `<_>` element renders nothing to the canvas. This is useful\nfor adjusting attributes for child elements.",
          "name": "_",
          "mixins": [
            {
              "name": "add2DTransformProps",
              "module": "/src/properties/transform_props"
            },
            {
              "name": "add2DTransformMethods",
              "module": "/src/methods/transform_methods"
            }
          ],
          "superclass": {
            "name": "P5Element",
            "module": "src/core.js"
          },
          "tagName": "_",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "_3D",
          "mixins": [
            {
              "name": "add3DTransformProps",
              "module": "/src/properties/transform_props"
            },
            {
              "name": "add3DTransformMethods",
              "module": "/src/methods/transform_methods"
            }
          ],
          "superclass": {
            "name": "P5Element",
            "module": "src/core.js"
          },
          "tagName": "p-_-3d",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addP5PropsAndMethods",
          "declaration": {
            "name": "addP5PropsAndMethods",
            "module": "src/core.js"
          }
        },
        {
          "kind": "js",
          "name": "P5Element",
          "declaration": {
            "name": "P5Element",
            "module": "src/core.js"
          }
        },
        {
          "kind": "js",
          "name": "RenderedElement",
          "declaration": {
            "name": "RenderedElement",
            "module": "src/core.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-_",
          "declaration": {
            "name": "_",
            "module": "src/core.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-_-3d",
          "declaration": {
            "name": "_3D",
            "module": "src/core.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/2d_shape_elements.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addArcProps",
          "members": [
            {
              "kind": "field",
              "name": "#start_angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#stop_angle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mouse_over"
            },
            {
              "kind": "field",
              "name": "start_angle",
              "description": "Angle to start the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "stop_angle",
              "description": "Angle to stop the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "description": "determines the way of drawing the arc:\n- OPEN - like an open semi-circle\n- CHORD - closed semi-circle\n- PIE - closed pie segment",
              "type": {
                "text": "CHORD|PIE|OPEN"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Draws an arc to the screen.\nThe origin may be changed with the ellipse_mode property.\n\nThe arc is always drawn clockwise from wherever start falls to wherever\nstop falls on the ellipse. Adding or subtracting TWO_PI to either angle\ndoes not change where they fall. If both start and stop fall at the same\nplace, a full ellipse will be drawn. Be aware that the y-axis increases in\nthe downward direction, therefore angles are measured clockwise from the\npositive x-direction (\"3 o'clock\").",
          "name": "Arc",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, width, height, start_angle, stop_angle, [mode]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#start_angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#stop_angle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "start_angle",
              "description": "Angle to start the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "stop_angle",
              "description": "Angle to stop the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "description": "determines the way of drawing the arc:\n- OPEN - like an open semi-circle\n- CHORD - closed semi-circle\n- PIE - closed pie segment",
              "type": {
                "text": "CHORD|PIE|OPEN"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addArcProps",
              "module": "src/elements/2d_shape_elements.js"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "arc",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws an ellipse (oval) to a 3D canvas. If no height is specified, the\nvalue of width is used for both the width and height. If a\nnegative height or width is specified, the absolute value is taken.\n\nAn ellipse with equal width and height is a circle. The origin may be\nchanged with the ellipseMode() function.",
          "name": "Ellipse",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, width, [height]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addEllipse2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addEllipse2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addEllipse2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addEllipse2DCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "ellipse",
          "customElement": true
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addDiameter",
          "members": [
            {
              "kind": "field",
              "name": "#diameter",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100"
            },
            {
              "kind": "field",
              "name": "diameter"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Draws a circle to the screen. A circle is a simple closed shape. It is the\nset of all points in a plane that are at a given distance from a given\npoint, the center.",
          "name": "Circle",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, diameter\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#diameter",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addDiameter",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "diameter",
              "inheritedFrom": {
                "name": "addDiameter",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addCircle2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addCircle2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addCircle2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addDiameter",
              "module": "src/elements/2d_shape_elements.js"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCircle2DCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "circle",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a line (a direct path between two points) to the screen. Its width\ncan be modified by using the stroke_weight property. A line cannot be\nfilled, therefore the fill_color property will not affect the color of a\nline. So to color a line, use the stroke property.",
          "name": "Line",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, x2, y2\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addLine2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addLine2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addLine2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY12",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addLine2DCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "line",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a point, a coordinate in space at the dimension of one pixel. The\ncolor of the point is changed with the stroke property. The size of\nthe point can be changed with the stroke_weight property.",
          "name": "Point",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addPointCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addPointCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addPointCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addPointCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "point",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a quad on the canvas. A quad is a quadrilateral, a four-sided\npolygon. It is similar to a rectangle, but the angles between its edges\nare not constrained to ninety degrees. The x1 and y1 properties set the\nfirst vertex and the subsequent pairs should proceed clockwise or\ncounter-clockwise around the defined shape.",
          "name": "Quad",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, x2, y2, x3, y3, x4, y4\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addQuad2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addQuad2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addQuad2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "vertices",
              "inheritedFrom": {
                "name": "addQuad2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY12",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addQuad2DCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "quad",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a rectangle on the canvas. A rectangle is a four-sided closed shape\nwith every angle at ninety degrees. By default, the x and y properties\nset the location of the upper-left corner, w sets the width, and h sets\nthe height. The way these properties are interpreted may be changed with\nthe rect_mode property.",
          "name": "Rect",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"x, y, width, height, top_left_radius, top_right_radius, bottom_right_radius, bottom_left_radius\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collider"
            },
            {
              "kind": "field",
              "name": "collision_args"
            },
            {
              "kind": "field",
              "name": "mouse_over"
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#rect_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addRectMode",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "rect_mode",
              "description": "Modifies the location from which rectangles are drawn by changing the way\nin which x and y coordinates are interpreted.\n\nThe default mode is CORNER, which interprets the x and y as the\nupper-left corner of the shape.\n\nrect_mode=\"CORNERS\" interprets x and y as the location of\none of the corners, and width and height as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not necessary that the first corner be the upper left\ncorner.\n\nrect_mode=\"CENTER\" interprets x and y as the shape's center\npoint.\n\nrect_mode=\"RADIUS\" also uses x and y as the shape's\ncenter\npoint, but uses width and height to specify half of the shape's\nwidth and height respectively.\n\nThe value to this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "CORNER|CORNERS|CENTER|RADIUS"
              },
              "inheritedFrom": {
                "name": "addRectMode",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#top_left_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#top_right_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#bottom_left_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#bottom_right_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "top_left_radius",
              "description": "radius of top-left corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "top_right_radius",
              "description": "radius of top-right corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "bottom_left_radius",
              "description": "radius of bottom-left corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "bottom_right_radius",
              "description": "radius of bottom-right corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addRectMode",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCornerRadius",
              "module": "src/elements/2d_shape_elements.js"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "rect",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a square to the screen. A square is a four-sided shape with every\nangle at ninety degrees, and equal side size. This element is a special\ncase of the rect element, where the width and height are the same, and the\nattribute is called \"s\" for side size. By default, the x and y attributes\nset the location of the upper-left corner, and s sets the side size of the\nsquare. The way these attributes are interpreted, may be changed with the\nrect_mode attribute.\n\nThe tl, tr, br, and bl attributes, if specified, determine corner radius\nfor the top-left, top-right, lower-right and lower-left corners,\nrespectively. An omitted corner radius attribute is set to the value of\nthe previously specified radius value in the attribute list.",
          "name": "Square",
          "members": [
            {
              "kind": "field",
              "name": "#size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100"
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"x, y, size, top_left_radius, top_right_radius, bottom_right_radius, bottom_left_radius\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collider"
            },
            {
              "kind": "field",
              "name": "collision_args"
            },
            {
              "kind": "field",
              "name": "mouse_over"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The side size of the square",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#rect_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addRectMode",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "rect_mode",
              "description": "Modifies the location from which rectangles are drawn by changing the way\nin which x and y coordinates are interpreted.\n\nThe default mode is CORNER, which interprets the x and y as the\nupper-left corner of the shape.\n\nrect_mode=\"CORNERS\" interprets x and y as the location of\none of the corners, and width and height as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not necessary that the first corner be the upper left\ncorner.\n\nrect_mode=\"CENTER\" interprets x and y as the shape's center\npoint.\n\nrect_mode=\"RADIUS\" also uses x and y as the shape's\ncenter\npoint, but uses width and height to specify half of the shape's\nwidth and height respectively.\n\nThe value to this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "CORNER|CORNERS|CENTER|RADIUS"
              },
              "inheritedFrom": {
                "name": "addRectMode",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#top_left_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#top_right_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#bottom_left_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#bottom_right_radius",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "top_left_radius",
              "description": "radius of top-left corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "top_right_radius",
              "description": "radius of top-right corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "bottom_left_radius",
              "description": "radius of bottom-left corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "bottom_right_radius",
              "description": "radius of bottom-right corner",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCornerRadius",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addRectMode",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCornerRadius",
              "module": "src/elements/2d_shape_elements.js"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "square",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a triangle to the canvas. A triangle is a plane created by connecting\nthree points. x1 and y1 specify the first point, x2 and y2 specify the\nsecond point, and x3 and y3 specify the\nthird point.",
          "name": "Triangle",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, x2, y2, x3, y3\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collider"
            },
            {
              "kind": "field",
              "name": "collision_args"
            },
            {
              "kind": "field",
              "name": "mouse_over"
            },
            {
              "kind": "field",
              "name": "vertices"
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY12",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "triangle",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a cubic Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. x1 and y1 specify\nthe first anchor point and x4 and y4 specify the other\nanchor point, which become the first and last points on the curve. (x2, y2)\nand (x3, y3) specify the two control points which define the shape\nof the curve. Approximately speaking, control points \"pull\" the curve\ntowards them.\n\nBezier curves were developed by French automotive engineer Pierre Bezier,\nand are commonly used in computer graphics to define gently sloping curves.",
          "name": "Bezier",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, x2, y2, x3, y3, x4, y4\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the bezier at t. t is the\nresultant point which is given between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addBezierMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the Bezier at position t.\nt is between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addBezierMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY12",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addBezierMethods",
              "module": "/src/methods/shape_methods"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "bezier",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a curved line on the screen between two points, given as (x2, y2) and (x3, y3).\n(x1, y1) is a control point, as\nif the curve came from this point even though it's not drawn. (x4, y4) similarly describes\nthe other control point.\n\nLonger curves can be created by putting a series of ```<curve>``` elements\ntogether or using ```<curve-vertex>```. The curve_tightness property provides control\nfor the visual quality of the curve.\nThe ```<curve>``` element is an implementation of Catmull-Rom splines.",
          "name": "Curve",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, x2, y2, x3, y3, x4, y4\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#tightness",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "tightness",
              "description": "Modifies the quality of the curve. The amount\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addCurveMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addCurveMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY12",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCurveTightness",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCurveMethods",
              "module": "/src/methods/shape_methods"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "curve",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Use the ```<contour>``` element to create negative shapes\nwithin a ```<shape>``` element such as the center of the letter 'O'.\nThe vertices of the ```<contour>``` are defined by its\n```<vertex>``` and ```<curve-vertex>``` children.\nThe vertices that define a negative shape must \"wind\" in the opposite direction\nfrom the exterior shape. First draw vertices for the exterior clockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n\nThis element must be a child of a ```<shape>```.\n\n## Examples\n\n<figure class=\"example\"><figcaption>Rectangular cut out</figcaption>\n\n```html\n<canvas\nwidth=\"400\"\nheight=\"400\"\nbackground=\"120, 140, 80\"\nloop=\"false\"\n>\n<shape\nanchor=\"width/2, height/2\"\nmode=\"CLOSE\"\nfill=\"240, 200, 180\"\nstroke=\"200, 100, 60\"\nstroke_weight=\"4\"\n>\n<vertex x=\"-100\" y=\"-100\">\n<vertex x=\"100\">\n<vertex y=\"100\">\n<vertex x=\"-100\" />\n</vertex>\n</vertex>\n</vertex>\n<contour>\n<vertex x=\"-50\" y=\"-50\">\n<vertex y=\"50\">\n<vertex x=\"50\">\n  <vertex y=\"-50\" />\n</vertex>\n</vertex>\n</vertex>\n</contour>\n</shape>\n</canvas>\n```\n\n</figure>",
          "name": "Contour",
          "members": [
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"beginContour\"",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "endRender"
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "contour",
          "customElement": true
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addShapeElementProps",
          "members": [
            {
              "kind": "field",
              "name": "#kind",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "type": {
                "text": "string"
              },
              "default": "\"beginShape\""
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[kind]\"]",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "endRender"
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "TRIANGLE_STRIP|QUADS|QUAD_STRIP|TESS}",
              "type": {
                "text": "POINTS|LINES|TRIANGLES|TRIANGLE_FAN"
              }
            },
            {
              "kind": "field",
              "name": "mode"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Using the ```<shape>``` element allow creating more\ncomplex forms. The vertices of the shape are defined by its ```<vertex>```,\n```<curve-vertex>```, and/or ```<quadratic-vertex>``` children.\nThe value of the kind property tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.\n\nTransformations such as translate, angle, and scale do not work on children on ```<shape>```.\nIt is also not possible to use other shapes, such as\n```<ellipse>``` or ```<rect>``` as children of ```<shape>```.",
          "name": "Shape",
          "mixins": [
            {
              "name": "addShapeElementProps",
              "module": "src/elements/2d_shape_elements.js"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addShape2DCollisionProps",
              "module": "src/elements/2d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "Transformed2DElement",
            "module": "src/elements/2d_shape_elements.js"
          },
          "tagName": "shape",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "#kind",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              },
              "type": {
                "text": "string"
              },
              "default": "\"beginShape\""
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[kind]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "endRender",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "TRIANGLE_STRIP|QUADS|QUAD_STRIP|TESS}",
              "type": {
                "text": "POINTS|LINES|TRIANGLES|TRIANGLE_FAN"
              },
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collider",
              "inheritedFrom": {
                "name": "addShape2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "collision_args",
              "inheritedFrom": {
                "name": "addShape2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "vertices",
              "inheritedFrom": {
                "name": "addShape2DCollisionProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "All shapes are constructed by connecting a series of vertices. ```<vertex>```\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively as a child of the ```<shape>``` element.",
          "name": "Vertex",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "vertex",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Specifies vertex coordinates for quadratic Bezier curves. Each ```<quadratic-vertex>```\ndefines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first ```<quadratic-vertex>``` child of a ```<shape>``` element\nmust have a ```<vertex>``` sibling above it to set the first anchor point.\n\nThis element must be a child of a ```<shape>``` element\nand only when there is no MODE or POINTS property specified on the\n ```<shape>```.",
          "name": "QuadraticVertex",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"cx, cy, x3, y3\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#cx",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addCXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#cy",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addCXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "cx",
              "inheritedFrom": {
                "name": "addCXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "cy",
              "inheritedFrom": {
                "name": "addCXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addCXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXY3",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-quadratic-vertex",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Specifies vertex coordinates for curves. This function may only\nbe used as a child of the ```<shape>``` element and only when there\nis no MODE property specified on the ```<shape>``.\n\nThe first and last points in a series of ```<curve-vertex>``` lines\nwill be used to\nguide the beginning and end of the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with ```<curve-vertex>``` will draw\nthe curve between the second, third, and fourth points. The\n```<curve-vertex>``` element is an implementation of Catmull-Rom\nsplines.",
          "name": "CurveVertex",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#tightness",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "tightness",
              "description": "Modifies the quality of the curve. The amount\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCurveTightness",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-curve-vertex",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addArcProps",
          "declaration": {
            "name": "addArcProps",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-arc",
          "declaration": {
            "name": "Arc",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-ellipse",
          "declaration": {
            "name": "Ellipse",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "js",
          "name": "addDiameter",
          "declaration": {
            "name": "addDiameter",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-circle",
          "declaration": {
            "name": "Circle",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-line",
          "declaration": {
            "name": "Line",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-point",
          "declaration": {
            "name": "Point",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-quad",
          "declaration": {
            "name": "Quad",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-rect",
          "declaration": {
            "name": "Rect",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-square",
          "declaration": {
            "name": "Square",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-triangle",
          "declaration": {
            "name": "Triangle",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-bezier",
          "declaration": {
            "name": "Bezier",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-curve",
          "declaration": {
            "name": "Curve",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-contour",
          "declaration": {
            "name": "Contour",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "js",
          "name": "addShapeElementProps",
          "declaration": {
            "name": "addShapeElementProps",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-shape",
          "declaration": {
            "name": "Shape",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-vertex",
          "declaration": {
            "name": "Vertex",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-quadratic-vertex",
          "declaration": {
            "name": "QuadraticVertex",
            "module": "src/elements/2d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-curve-vertex",
          "declaration": {
            "name": "CurveVertex",
            "module": "src/elements/2d_shape_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/3d_light_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Creates an ambient light with the given color.\n\nAmbient light does not come from a specific direction.\nObjects are evenly lit from all sides. Ambient lights are\nalmost always used in combination with other types of lights.",
          "name": "AmbientLight",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"v1, v2, v3, [alpha]\",\n    \"gray, [alpha]\",\n    \"value\",\n    \"values\",\n    \"color\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "Number"
              },
              "description": "red or hue value relative to the current color range",
              "name": "v1"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "green or saturation value relative to the current color range",
              "name": "v2"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "blue or brightness value relative to the current color range",
              "name": "v3"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "alpha value relative to current color range (default is 0-255)",
              "name": "alpha"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "number specifying value between white and black",
              "name": "gray"
            },
            {
              "type": {
                "text": "String"
              },
              "description": "a color string",
              "name": "value"
            },
            {
              "type": {
                "text": "Number[]"
              },
              "description": "an array containing the red,green,blue & and alpha components of the color",
              "name": "values"
            },
            {
              "type": {
                "text": "p5.Color"
              },
              "description": "color as a <a href=\"https://p5js.org/reference/#/p5.Color\" target=\"_blank\">p5.Color</a>",
              "name": "color"
            }
          ],
          "superclass": {
            "name": "WebGLLight",
            "module": "/src/properties/3d_props"
          },
          "tagName": "ambient-light",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Creates a directional light with the given color and direction.\n\nDirectional light comes from one direction.\nThe direction is specified as numbers inclusively between -1 and 1.\nFor example, setting the direction as (0, -1, 0) will cause the\ngeometry to be lit from below (since the light will be facing\ndirectly upwards). Similarly, setting the direction as (1, 0, 0)\nwill cause the geometry to be lit from the left (since the light\nwill be facing directly rightwards).\n\nDirectional lights do not have a specific point of origin, and\ntherefore cannot be positioned closer or farther away from a geometry.\n\nA maximum of **5** directional lights can be active at once.",
          "name": "DirectionalLight",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"v1, v2, v3, x, y, z\",\n    \"v1, v2, v3, direction\",\n    \"color, x, y, z\",\n    \"color, direction\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_color",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_color",
              "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except ```<ambient-light>```).\n\nspecular_color affects only the lights which are created by\nthis element or its children\n\nThis property is used in combination with\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\nIf a geometry does not use specular_material, this property\nwill have no effect.\n\nThe default color is white (255, 255, 255), which is used if\nspecular_color is not explicitly set.\n\nNote: specular_color is equivalent to the Processing function\n<a href=\"https://processing.org/reference/lightSpecular_.\nhtml\">lightSpecular</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addSpecularColor",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "WebGLLight",
            "module": "/src/properties/3d_props"
          },
          "tagName": "p-directional-light",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Creates a point light with the given color and position.\n\nA point light emits light from a single point in all directions.\nBecause the light is emitted from a specific point (position),\nit has a different effect when it is positioned farther vs. nearer\nan object.\n\nA maximum of **5** point lights can be active at once.",
          "name": "PointLight",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"v1, v2, v3, x, y, z\",\n    \"v1, v2, v3, position\",\n    \"color, x, y, z\",\n    \"color, position\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#v1",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#v2",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#v3",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "v1",
              "description": "red or hue value using current color_mode",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "v2",
              "description": "green or saturation value using current color_mode",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "v3",
              "description": "blue, brightness, or lightness value using current color_mode",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addColorVals",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#light_falloff",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addLightFalloff",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "light_falloff",
              "description": "Sets the falloff rate for ```<point-light>```\nand ```<spot-light>```.\n\nlight_falloff affects only this element and its children.\n\nThe values are `constant`, `linear`, an `quadratic` and are used to calculate falloff as follows:\n\nd = distance from light position to vertex position\n\nfalloff = 1 / (CONSTANT + d \\* LINEAR + (d \\* d) \\* QUADRATIC)",
              "type": {
                "text": "[number, number, number]"
              },
              "inheritedFrom": {
                "name": "addLightFalloff",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_color",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_color",
              "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except ```<ambient-light>```).\n\nspecular_color affects only the lights which are created by\nthis element or its children\n\nThis property is used in combination with\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\nIf a geometry does not use specular_material, this property\nwill have no effect.\n\nThe default color is white (255, 255, 255), which is used if\nspecular_color is not explicitly set.\n\nNote: specular_color is equivalent to the Processing function\n<a href=\"https://processing.org/reference/lightSpecular_.\nhtml\">lightSpecular</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addColorVals",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addLightFalloff",
              "module": "/src/properties/3d_props"
            },
            {
              "name": "addSpecularColor",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "WebGLLight",
            "module": "/src/properties/3d_props"
          },
          "tagName": "p-point-light",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Places an ambient and directional light in the scene.\nThe lights are set to <ambient-light v1=\"128\" v2=\"128\" v3=\"128\"> and\n<directional-light v1=\"128\" v2=\"128\" v3'=\"128\" x=\"0\" y=\"0\" z=\"-1\">.",
          "name": "Lights",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_color",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_color",
              "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except ```<ambient-light>```).\n\nspecular_color affects only the lights which are created by\nthis element or its children\n\nThis property is used in combination with\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\nIf a geometry does not use specular_material, this property\nwill have no effect.\n\nThe default color is white (255, 255, 255), which is used if\nspecular_color is not explicitly set.\n\nNote: specular_color is equivalent to the Processing function\n<a href=\"https://processing.org/reference/lightSpecular_.\nhtml\">lightSpecular</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addSpecularColor",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "WebGLLight",
            "module": "/src/properties/3d_props"
          },
          "tagName": "p-lights",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Creates a spot light with the given color, position,\nlight direction, angle, and concentration.\n\nLike a ```<point-light>```, a ```<spot-light>```\nemits light from a specific point (position). It has a different effect\nwhen it is positioned farther vs. nearer an object.\n\nHowever, unlike a ```<point-light>```, the light is emitted in **one\ndirection**\nalong a conical shape. The shape of the cone can be controlled using\nthe `angle` and `concentration` parameters.\n\nThe `angle` parameter is used to\ndetermine the radius of the cone. And the `concentration`\nparameter is used to focus the light towards the center of\nthe cone. Both parameters are optional, however if you want\nto specify `concentration`, you must also specify `angle`.\nThe minimum concentration value is 1.\n\nA maximum of **5** spot lights can be active at once.",
          "name": "SpotLight",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"v1, v2, v3, x, y, z, rx, ry, rz, [angle], [concentration]\",\n    \"color, position, direction, [angle], [concentration]\",\n    \"v1, v2, v3, position, direction, [angle], [concentration]\",\n    \"color, x, y, z, direction, [angle], [concentration]\",\n    \"color, position, rx, ry, rz, [angle], [concentration]\",\n    \"v1, v2, v3, x, y, z, direction, [angle], [concentration]\",\n    \"v1, v2, v3, position, rx, ry, rz, [angle], [concentration]\",\n    \"color, x, y, z, rx, ry, rz, [angle], [concentration]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#light_falloff",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addLightFalloff",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "light_falloff",
              "description": "Sets the falloff rate for ```<point-light>```\nand ```<spot-light>```.\n\nlight_falloff affects only this element and its children.\n\nThe values are `constant`, `linear`, an `quadratic` and are used to calculate falloff as follows:\n\nd = distance from light position to vertex position\n\nfalloff = 1 / (CONSTANT + d \\* LINEAR + (d \\* d) \\* QUADRATIC)",
              "type": {
                "text": "[number, number, number]"
              },
              "inheritedFrom": {
                "name": "addLightFalloff",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_color",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_color",
              "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except ```<ambient-light>```).\n\nspecular_color affects only the lights which are created by\nthis element or its children\n\nThis property is used in combination with\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\nIf a geometry does not use specular_material, this property\nwill have no effect.\n\nThe default color is white (255, 255, 255), which is used if\nspecular_color is not explicitly set.\n\nNote: specular_color is equivalent to the Processing function\n<a href=\"https://processing.org/reference/lightSpecular_.\nhtml\">lightSpecular</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addSpecularColor",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addLightFalloff",
              "module": "/src/properties/3d_props"
            },
            {
              "name": "addSpecularColor",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "WebGLLight",
            "module": "/src/properties/3d_props"
          },
          "tagName": "p-spot-light",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-ambient-light",
          "declaration": {
            "name": "AmbientLight",
            "module": "src/elements/3d_light_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-directional-light",
          "declaration": {
            "name": "DirectionalLight",
            "module": "src/elements/3d_light_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-point-light",
          "declaration": {
            "name": "PointLight",
            "module": "src/elements/3d_light_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-lights",
          "declaration": {
            "name": "Lights",
            "module": "src/elements/3d_light_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-spot-light",
          "declaration": {
            "name": "SpotLight",
            "module": "src/elements/3d_light_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/3d_shape_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Normal",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"vector\", \"x, y, z\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-normal",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Plane",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "\"[width], [height], [detail_x], [detail_y]\"",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-plane",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Box",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[width], [height], [depth], [detail_x], [detail_y]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-box",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Sphere",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[radius], [detail_x], [detail_y]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-sphere",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Cylinder",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"[radius], [height], [detail_x], [detail_y], [bottomCap], [topCap]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-cylinder",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Cone",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[radius], [height], [detail_x], [detail_y], [cap]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-cone",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Ellipsoid",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"[radius_x], [radius_y], [radius_z], [detail_x], [detail_y]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-ellipsoid",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Torus",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[radius], [tubeRadius], [detailX], [detailY]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-torus",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "LoadModel",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"path, normalize, [successCallback], [failureCallback], [fileType]\",\n    \"path, [successCallback], [failureCallback], [fileType]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-load-model",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Model",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"model\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "WebGLGeometry",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "p-model",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws an arc onto a ```<canvas-3d>```.\nThe origin may be changed with the ellipse_mode property.\n\nThe arc is always drawn clockwise from wherever start falls to wherever\nstop falls on the ellipse. Adding or subtracting TWO_PI to either angle\ndoes not change where they fall. If both start and stop fall at the same\nplace, a full ellipse will be drawn. Be aware that the y-axis increases in\nthe downward direction, therefore angles are measured clockwise from the\npositive x-direction (\"3 o'clock\").",
          "name": "Arc3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"x, y, width, height, start_angle, stop_angle, [mode], [detail]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#start_angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#stop_angle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse_over",
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "start_angle",
              "description": "Angle to start the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "stop_angle",
              "description": "Angle to stop the arc. Units are radians by default but may be changed\nto degrees with the degree_mode property.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "description": "determines the way of drawing the arc:\n- OPEN - like an open semi-circle\n- CHORD - closed semi-circle\n- PIE - closed pie segment",
              "type": {
                "text": "CHORD|PIE|OPEN"
              },
              "inheritedFrom": {
                "name": "addArcProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#detail",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "25",
              "inheritedFrom": {
                "name": "addDetail",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "detail",
              "description": "specifies the number of vertices that makes up the perimeter of the shape.\nDefault value is 25. Won't draw a stroke for a detail of more than 50.",
              "type": {
                "text": "Integer"
              },
              "inheritedFrom": {
                "name": "addDetail",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addArcProps",
              "module": "/src/elements/2d_shape_elements"
            },
            {
              "name": "addDetail",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "arc-3d",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws an ellipse (oval) onto a ```<canvas-3d>```. If no height is specified, the\nvalue of width is used for both the width and height. If a\nnegative height or width is specified, the absolute value is taken.\n\nAn ellipse with equal width and height is a circle. The origin may be\nchanged with the ellipseMode() function.",
          "name": "Ellipse3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, width, [height], [detail]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "ellipse-3d",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a circle onto a ```<canvas-3d>```. A circle is a simple closed shape. It is the\nset of all points in a plane that are at a given distance from a given\npoint, the center.",
          "name": "Circle3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, diameter\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#diameter",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addDiameter",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "diameter",
              "inheritedFrom": {
                "name": "addDiameter",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addDiameter",
              "module": "/src/elements/2d_shape_elements"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "circle",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a line (a direct path between two points) onto a ```<canvas-3d>```. Its width\ncan be modified by using the stroke_weight property. A line cannot be\nfilled, therefore the fill_color property will not affect the color of a\nline. So to color a line, use the stroke property.",
          "name": "Line3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, z1, x2, y2, z2\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ1",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ2",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "line-3d",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a point, a coordinate in space at the dimension of one pixel onto a ```<canvas-3d>```.\nThe color of the point is changed with the stroke property. The size of\nthe point can be changed with the stroke_weight property.",
          "name": "Point3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, z\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "point",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a quad onto a ```<canvas-3d>```. A quad is a quadrilateral, a four-sided\npolygon. It is similar to a rectangle, but the angles between its edges\nare not constrained to ninety degrees. The x1 and y1 properties set the\nfirst vertex and the subsequent pairs should proceed clockwise or\ncounter-clockwise around the defined shape.",
          "name": "Quad3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, [detail_x], [detail_y]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z4",
              "description": "The fourth z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#detail_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "2",
              "inheritedFrom": {
                "name": "addDetailXY",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#detail_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "2",
              "inheritedFrom": {
                "name": "addDetailXY",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "detail_x",
              "description": "number of segments in the x-direction",
              "type": {
                "text": "Integer"
              },
              "inheritedFrom": {
                "name": "addDetailXY",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "detail_y",
              "description": "number of segments in the y-direction",
              "type": {
                "text": "Integer"
              },
              "inheritedFrom": {
                "name": "addDetailXY",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ1",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ2",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addDetailXY",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "quad",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a rectangle onto a ```<canvas-3d>```. A rectangle is a four-sided closed shape\nwith every angle at ninety degrees. By default, the x and y properties\nset the location of the upper-left corner, w sets the width, and h sets\nthe height. The way these properties are interpreted may be changed with\nthe rect_mode property.",
          "name": "Rect3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"x, y, width, [height], [top_left_radius], [top_right_radius], [bottom_right_radius], [bottom_left_radius]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "rect",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a triangle onto a ```<canvas-3d>```. A triangle is a plane created by connecting\nthree points. x1 and y1 specify the first point, x2 and y2 specify the\nsecond point, and x3 and y3 specify the\nthird point.",
          "name": "Triangle3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, z1, x2, y2, z2, x3, y3, z3\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ1",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ2",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "triangle",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a cubic Bezier curve onto a ```<canvas-3d>```. These curves are defined by a\nseries of anchor and control points. x1 and y1 specify\nthe first anchor point and x4 and y4 specify the other\nanchor point, which become the first and last points on the curve. (x2, y2)\nand (x3, y3) specify the two control points which define the shape\nof the curve. Approximately speaking, control points \"pull\" the curve\ntowards them.\n\nBezier curves were developed by French automotive engineer Pierre Bezier,\nand are commonly used in computer graphics to define gently sloping curves.",
          "name": "Bezier3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z4",
              "description": "The fourth z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the bezier at t. t is the\nresultant point which is given between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addBezierMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the Bezier at position t.\nt is between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addBezierMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ1",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ2",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            },
            {
              "name": "addBezierMethods",
              "module": "/src/methods/shape_methods"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "bezier-3d",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws a curved line onto a ```<canvas-3d>``` between two points,\ngiven as (x2, y2) and (x3, y3).\n(x1, y1) is a control point, as\nif the curve came from this point even though it's not drawn. (x4, y4) similarly describes\nthe other control point.\n\nLonger curves can be created by putting a series of ```<curve-3d>``` elements\ntogether or using ```<curve-vertex>```. The curve_tightness property provides control\nfor the visual quality of the curve.\nThe ```<curve>``` element is an implementation of Catmull-Rom splines.",
          "name": "Curve3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z4",
              "description": "The fourth z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#tightness",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "tightness",
              "description": "Modifies the quality of the curve. The amount\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addCurveMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addCurveMethods",
                "module": "src/methods/shape_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ1",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ2",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ3",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addXYZ4",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCurveTightness",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            },
            {
              "name": "addCurveMethods",
              "module": "/src/methods/shape_methods"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "curve",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Use the ```<contour-3d>``` element to create negative shapes\nwithin a ```<shape-3d>``` element such as the center of the letter 'O'.\nThe vertices of the ```<contour-3d>``` are defined by its\n```<vertex-3d>``` and ```<curve-vertex-3d>``` children.\nThe vertices that define a negative shape must \"wind\" in the opposite direction\nfrom the exterior shape. First draw vertices for the exterior clockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n\nThis element must be a child of a ```<shape-3d>```.",
          "name": "Contour3D",
          "members": [
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"beginContour\"",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "endRender"
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "contour",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Using the ```<shape-3d>``` element allow creating more\ncomplex forms on a ```<canvas-3d>```.\nThe vertices of the shape are defined by its ```<vertex-3d>```,\n```<curve-vertex-3d>```, and/or ```<quadratic-vertex-3d>``` children.\nThe value of the kind property tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.\n\n\nTransformations such as translate, angle, and scale do not work on children on ```<shape-3d>```.\nIt is also not possible to use other shapes, such as\n```<ellipse-3d>``` or ```<rect-3d>``` as children of ```<shape-3d>```.",
          "name": "Shape3D",
          "mixins": [
            {
              "name": "addShapeElementProps",
              "module": "/src/elements/2d_shape_elements"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            }
          ],
          "superclass": {
            "name": "Base2DTo3D",
            "module": "src/elements/3d_shape_elements.js"
          },
          "tagName": "shape-3d",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "#kind",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              },
              "type": {
                "text": "string"
              },
              "default": "\"beginShape\""
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"[kind]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "endRender",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "TRIANGLE_STRIP|QUADS|QUAD_STRIP|TESS}",
              "type": {
                "text": "POINTS|LINES|TRIANGLES|TRIANGLE_FAN"
              },
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "inheritedFrom": {
                "name": "addShapeElementProps",
                "module": "src/elements/2d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "All shapes are constructed by connecting a series of vertices. ```<vertex-3d>```\nis used to specify the vertex coordinates for shapes on a ```<canvas-3d>```.\nIt is used exclusively as a child of the ```<shape-3d>``` element.",
          "name": "Vertex3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, z, [u], [v]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#u",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addUV",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "#v",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addUV",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "u",
              "description": "the vertex's texture u-coordinate",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addUV",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "field",
              "name": "v",
              "description": "the vertex's texture v-coordinate",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addUV",
                "module": "src/elements/3d_shape_elements.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addUV",
              "module": "src/elements/3d_shape_elements.js"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "vertex",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Specifies vertex coordinates for quadratic Bezier curves on a ```<canvas-3d>```.\nEach ```<quadratic-vertex-3d>```\ndefines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first ```<quadratic-vertex-3d>``` child of a ```<shape>``` element\nmust have a ```<vertex-3d>``` sibling above it to set the first anchor point.\n\nThis element must be a child of a ```<shape-3d>``` element\nand only when there is no MODE or POINTS property specified on the\n ```<shape-3d>```.",
          "name": "QuadraticVertex3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"cx, cy, cz, x3, y3, z3\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXYZ3",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-quadratic-vertex-3d",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Specifies vertex coordinates for curves. This function may only\nbe used as a child of the ```<shape-3d>``` element and only when there\nis no MODE property specified on the ```<shape-3d>``.\n\nThe first and last points in a series of ```<curve-vertex-3d>``` lines\nwill be used to\nguide the beginning and end of the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with ```<curve-vertex>``` will draw\nthe curve between the second, third, and fourth points. The\n```<curve-vertex>``` element is an implementation of Catmull-Rom\nsplines.",
          "name": "CurveVertex3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"x, y, z\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#tightness",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "tightness",
              "description": "Modifies the quality of the curve. The amount\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCurveTightness",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "remove3DFromRenderFunctionName",
              "module": "src/elements/3d_shape_elements.js"
            },
            {
              "name": "addXYZ",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addCurveTightness",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-curve-vertex-3d",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-normal",
          "declaration": {
            "name": "Normal",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-plane",
          "declaration": {
            "name": "Plane",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-box",
          "declaration": {
            "name": "Box",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-sphere",
          "declaration": {
            "name": "Sphere",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-cylinder",
          "declaration": {
            "name": "Cylinder",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-cone",
          "declaration": {
            "name": "Cone",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-ellipsoid",
          "declaration": {
            "name": "Ellipsoid",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-torus",
          "declaration": {
            "name": "Torus",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-load-model",
          "declaration": {
            "name": "LoadModel",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-model",
          "declaration": {
            "name": "Model",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-arc-3d",
          "declaration": {
            "name": "Arc3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-ellipse-3d",
          "declaration": {
            "name": "Ellipse3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-circle-3d",
          "declaration": {
            "name": "Circle3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-line-3d",
          "declaration": {
            "name": "Line3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-point-3d",
          "declaration": {
            "name": "Point3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-quad-3d",
          "declaration": {
            "name": "Quad3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-rect-3d",
          "declaration": {
            "name": "Rect3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-triangle-3d",
          "declaration": {
            "name": "Triangle3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-bezier-3d",
          "declaration": {
            "name": "Bezier3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-curve-3d",
          "declaration": {
            "name": "Curve3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-contour-3d",
          "declaration": {
            "name": "Contour3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-shape-3d",
          "declaration": {
            "name": "Shape3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-vertex-3d",
          "declaration": {
            "name": "Vertex3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-quadratic-vertex-3d",
          "declaration": {
            "name": "QuadraticVertex3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-curve-vertex-3d",
          "declaration": {
            "name": "CurveVertex3D",
            "module": "src/elements/3d_shape_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/beyond_canvas_elements.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defineCustomElement",
          "parameters": [
            {
              "name": "el"
            }
          ]
        },
        {
          "kind": "class",
          "description": "This HTML element loads an XML sketch file. This should be added to the\nindex.html file as a `<link>` element with the attributes is=\"p-sketch\" and\nhref=\"[PATH TO XML FILE]\".\n\n## Examples\n\n<figure class=\"example\"><figcaption>Add a sketch to html</figcaption>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<script src=\"p5.js\"></script>\n<script src=\"p5.marker.js\" defer></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n<link href=\"sketch.xml\" is=\"p-sketch\" />\n<meta charset=\"utf-8\" />\n</head>\n<body></body>\n</html>\n```\n\n</figure>",
          "name": "Sketch",
          "members": [
            {
              "kind": "field",
              "name": "elementName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"p-sketch\""
            },
            {
              "kind": "method",
              "name": "#convertElement",
              "parameters": [
                {
                  "name": "xmlEl"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#convertXML",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#copyAttributes",
              "parameters": [
                {
                  "name": "orig"
                },
                {
                  "name": "copy"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#loadXML",
              "parameters": [
                {
                  "name": "path"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#xmlTagToCreateElementArguments",
              "parameters": [
                {
                  "name": "xmlTag"
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLLinkElement",
            "module": "src/elements/beyond_canvas_elements.js"
          },
          "tagName": "p-sketch",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "Asset",
          "members": [
            {
              "kind": "field",
              "name": "elementName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"p-asset\""
            },
            {
              "kind": "field",
              "name": "loadFns",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    image: \"loadImage\",\n    font: \"loadFont\",\n    json: \"loadJSON\",\n    strings: \"loadStrings\",\n    table: \"loadTable\",\n    xml: \"loadXML\",\n    bytes: \"loadBytes\",\n    get: \"httpGet\",\n    shader: \"loadShader\",\n  }"
            },
            {
              "kind": "method",
              "name": "load",
              "parameters": [
                {
                  "name": "pInst"
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "p-asset",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineCustomElement",
          "declaration": {
            "name": "defineCustomElement",
            "module": "src/elements/beyond_canvas_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-sketch",
          "declaration": {
            "name": "Sketch",
            "module": "src/elements/beyond_canvas_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-asset",
          "declaration": {
            "name": "Asset",
            "module": "src/elements/beyond_canvas_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/canvas_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "The `<canvas>` element is a rectangular area of the window for rendering\nimagery. All child elements are rendered to the canvas.\n\nThis canvas will render 2D elements only. For a 3D canvas, use\n```<canvas-3d>```.",
          "name": "Canvas",
          "members": [
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"p2d\""
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName"
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "runCode",
              "inheritedFrom": {
                "name": "addCanvasMethods",
                "module": "src/methods/canvas_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#background",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "background",
              "description": "The background property sets the color or image used\nfor the background of the p5.js canvas. The default background is transparent.\nA <a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object can be provided to set the background color.\n\nA <a href=\"https://p5js.org/reference/#/p5.Image\">p5.Image</a> can also be provided to set the background image.\n\nThe arguments to <a href=\"https://p5js.org/reference/#/p5/color\">color()</a> can also be provided,\nseparated by commas.",
              "type": {
                "text": "p5.Color|p5.Image"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Sets the cursor when hovering over the canvas.\n\nYou can set cursor to any of the following constants:\nARROW, CROSS, HAND, MOVE, TEXT and WAIT\n\nYou may also set cursor to the URL of an image file. The recommended size\nis 16x16 or 32x32 pixels. (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n\nFor more information on Native CSS cursors and url visit:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n\nYou may also set cursor to \"type, x, y\", where type is one of the types above,\nx is the horizontal active spot of the cursor (must be less than 32)\nand\ny is the vertical active spot of the cursor (must be less than 32)",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the canvas in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pixels",
              "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixel_density) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh density displays may have more pixels (by a factor of\npixel_density^2).\nFor example, if the image is 100×100 pixels, there will be 40,000. With\npixel_density = 2, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0).",
              "type": {
                "text": "number[]"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "loop",
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#resize",
              "parameters": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the canvas in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "addColorMethods",
                "module": "src/methods/color_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addMathMethods",
                "module": "src/methods/math_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "addStorage",
                "module": "src/properties/data_props.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_rate",
              "description": "frame_rate specifies the number of frames to be displayed every second.\nFor example,\nframe_rate=\"30\" will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"),\nwhich is set to 60 frames per second on most computers.\nA frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth\nanimations.\n\nThe canvas must be rendered at least once for frame_rate to have a\nvalue.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "pixel_density",
              "description": "pixel_density specifies the pixel scaling for high pixel density displays.\nBy default pixel density is set to match display density, set pixel_density=\"1\"\nto turn this off.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "display_density",
              "description": "The pixel density of the current display the sketch is running on. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "delta_time",
              "description": "The delta_time property contains the time\ndifference between the beginning of the previous frame and the beginning\nof the current frame in milliseconds.\n\nThis variable is useful for creating time sensitive animation or physics\ncalculation that should stay constant regardless of frame rate.\n(read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "screen",
              "description": "screen stores information about the screen displaying the canvas.\nTo get the dimensions of the screen, use:\n```\nscreen.width\nscreen.height\n```\nscreen is available in any browser and is not specific to this\nlibrary.\nThe full documentation is here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Screen\n(read-only)",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "window",
              "description": "The window object provides information about the window containing the\ncanvas.\n- window.width   - number: width of the window\n- window.height  - number: height of the window\n- window.resized - boolean: true if the window was resized since last\nframe",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#window",
              "privacy": "private",
              "default": "new Window(this)",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "grid_output",
              "description": "grid_output lays out the\ncontent of the canvas in the form of a grid (html table) based\non the spatial location of each shape. A brief\ndescription of the canvas is available before the table output.\nThis description includes: color of the background, size of the canvas,\nnumber of objects, and object types (example: \"lavender blue canvas is\n200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid\ndescribes the content spatially, each element is placed on a cell of the\ntable depending on its position. Within each cell an element the color\nand type of shape of that element are available (example: \"orange ellipse\").\nThese descriptions can be selected individually to get more details.\nA list of elements where shape, color, location, and area are described\n(example: \"orange ellipse location=top left area=1%\") is also available.\n\ngrid_output=\"true\" and grid_output=\"FALLBACK\"\nmake the output available in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\na sub DOM inside the canvas element</a> which is accessible to screen readers.\ngrid_output=\"LABEL\" creates an\nadditional div with the output adjacent to the canvas, this is useful\nfor non-screen reader users that might want to display the output outside\nof the canvas' sub DOM as they code. However, using LABEL will create\nunnecessary redundancy for screen reader users. We recommend using LABEL\nonly as part of the development process of a sketch and removing it before\npublishing or sharing with screen reader users.",
              "type": {
                "text": "true|LABEL|FALLBACK"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add2DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addCanvasMethods",
              "module": "/src/methods/canvas_methods"
            },
            {
              "name": "addCanvasProperties",
              "module": "/src/properties/canvas_props"
            },
            {
              "name": "addP5PropsAndMethods",
              "module": "/src/core"
            },
            {
              "name": "addEnvironmentProps",
              "module": "/src/properties/environment_props"
            },
            {
              "name": "add2DTransformProps",
              "module": "/src/properties/transform_props"
            },
            {
              "name": "add2DTransformMethods",
              "module": "/src/methods/transform_methods"
            }
          ],
          "superclass": {
            "name": "HTMLCanvasElement",
            "module": "src/elements/canvas_elements.js"
          },
          "tagName": "p-canvas",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "The ```<canvas-3d>``` element is a ```<canvas>``` element\nfor rendering 3D elements.",
          "name": "WebGLCanvas",
          "members": [
            {
              "kind": "field",
              "name": "#bezier_detail",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#curve_detail",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#debug_mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#orbit_control",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"webgl\""
            },
            {
              "kind": "field",
              "name": "bezier_detail",
              "description": "Sets the resolution at which Bezier's curve is displayed. The default value is 20.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "camera",
              "description": "Sets the current (active) camera of a 3D sketch.\nAllows for switching between multiple cameras.\n\nComma-separated arguments for\n<a href=\"https://p5js.org/reference/#/p5/camera\">camera()</a>\nmay also be provided to adjust the current camera.",
              "type": {
                "text": "p5.Camera"
              }
            },
            {
              "kind": "field",
              "name": "curve_detail",
              "description": "Sets the resolution at which curves display. The default value is 20 while\nthe minimum value is 3.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "debug_mode",
              "description": "debug_mode helps visualize 3D space by adding a grid to indicate where the\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\ndirections. This property can be set to \"true\" to create a\ndefault grid and axes icon, or it can be set to a comma-separated list\nof values to pass into\n<a href=\"https://p5js.org/reference/#/p5/debugMode\">debugMode()</a>.\n\nBy default, the grid will run through the origin (0,0,0) of the sketch\nalong the XZ plane\nand the axes icon will be offset from the origin.  Both the grid and axes\nicon will be sized according to the current canvas size.\nNote that because the\ngrid runs parallel to the default camera view, it is often helpful to use\ndebug_mode along with orbit_control to allow full view of the grid.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "orbit_control",
              "description": "Allows movement around a 3D sketch using a mouse or trackpad.\nLeft-clicking and dragging will rotate the camera position about the\ncenter of the sketch,\nright-clicking and dragging will pan the camera position without rotation,\nand using the mouse wheel (scrolling) will move the camera closer or\nfurther\nfrom the center of the sketch. This property can be set with parameters\ndictating sensitivity to mouse movement along the X, Y, and Z axes.\nSetting orbit_control=\"true\" is equivalent to setting\norbit_control=\"1, 1\".\nTo reverse direction of movement in either axis, enter a negative number\nfor sensitivity.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "ortho",
              "description": "Sets an orthographic projection for the current camera in a 3D sketch\nand defines a box-shaped viewing frustum within which objects are seen.\nIn this projection, all objects with the same dimension appear the same\nsize, regardless of whether they are near or far from the camera.\n\nThis may be set to a comma-separated list of arguments to\n<a href=\"https://p5js.org/reference/#/p5/ortho\">ortho()</a>\n\nIf set to \"true\", the following default is used:\northo(-width/2, width/2, -height/2, height/2).",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName"
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "runCode",
              "inheritedFrom": {
                "name": "addCanvasMethods",
                "module": "src/methods/canvas_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#background",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "background",
              "description": "The background property sets the color or image used\nfor the background of the p5.js canvas. The default background is transparent.\nA <a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object can be provided to set the background color.\n\nA <a href=\"https://p5js.org/reference/#/p5.Image\">p5.Image</a> can also be provided to set the background image.\n\nThe arguments to <a href=\"https://p5js.org/reference/#/p5/color\">color()</a> can also be provided,\nseparated by commas.",
              "type": {
                "text": "p5.Color|p5.Image"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Sets the cursor when hovering over the canvas.\n\nYou can set cursor to any of the following constants:\nARROW, CROSS, HAND, MOVE, TEXT and WAIT\n\nYou may also set cursor to the URL of an image file. The recommended size\nis 16x16 or 32x32 pixels. (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n\nFor more information on Native CSS cursors and url visit:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n\nYou may also set cursor to \"type, x, y\", where type is one of the types above,\nx is the horizontal active spot of the cursor (must be less than 32)\nand\ny is the vertical active spot of the cursor (must be less than 32)",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the canvas in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pixels",
              "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixel_density) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh density displays may have more pixels (by a factor of\npixel_density^2).\nFor example, if the image is 100×100 pixels, there will be 40,000. With\npixel_density = 2, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0).",
              "type": {
                "text": "number[]"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "loop",
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#resize",
              "parameters": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the canvas in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addCanvasProperties",
                "module": "src/properties/canvas_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addP5PropsAndMethods",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "addColorMethods",
                "module": "src/methods/color_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "addWebGLMethods",
                "module": "src/methods/3d_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "addEventProps",
                "module": "src/properties/event_props.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "addCollide",
                "module": "src/methods/collide_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addMathMethods",
                "module": "src/methods/math_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addMathProps",
                "module": "src/properties/math_props.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "addStorage",
                "module": "src/properties/data_props.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "addDataMethods",
                "module": "src/methods/data_methods.js"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_rate",
              "description": "frame_rate specifies the number of frames to be displayed every second.\nFor example,\nframe_rate=\"30\" will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"),\nwhich is set to 60 frames per second on most computers.\nA frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth\nanimations.\n\nThe canvas must be rendered at least once for frame_rate to have a\nvalue.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "pixel_density",
              "description": "pixel_density specifies the pixel scaling for high pixel density displays.\nBy default pixel density is set to match display density, set pixel_density=\"1\"\nto turn this off.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "display_density",
              "description": "The pixel density of the current display the sketch is running on. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "delta_time",
              "description": "The delta_time property contains the time\ndifference between the beginning of the previous frame and the beginning\nof the current frame in milliseconds.\n\nThis variable is useful for creating time sensitive animation or physics\ncalculation that should stay constant regardless of frame rate.\n(read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "screen",
              "description": "screen stores information about the screen displaying the canvas.\nTo get the dimensions of the screen, use:\n```\nscreen.width\nscreen.height\n```\nscreen is available in any browser and is not specific to this\nlibrary.\nThe full documentation is here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Screen\n(read-only)",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "window",
              "description": "The window object provides information about the window containing the\ncanvas.\n- window.width   - number: width of the window\n- window.height  - number: height of the window\n- window.resized - boolean: true if the window was resized since last\nframe",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#window",
              "privacy": "private",
              "default": "new Window(this)",
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "grid_output",
              "description": "grid_output lays out the\ncontent of the canvas in the form of a grid (html table) based\non the spatial location of each shape. A brief\ndescription of the canvas is available before the table output.\nThis description includes: color of the background, size of the canvas,\nnumber of objects, and object types (example: \"lavender blue canvas is\n200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid\ndescribes the content spatially, each element is placed on a cell of the\ntable depending on its position. Within each cell an element the color\nand type of shape of that element are available (example: \"orange ellipse\").\nThese descriptions can be selected individually to get more details.\nA list of elements where shape, color, location, and area are described\n(example: \"orange ellipse location=top left area=1%\") is also available.\n\ngrid_output=\"true\" and grid_output=\"FALLBACK\"\nmake the output available in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\na sub DOM inside the canvas element</a> which is accessible to screen readers.\ngrid_output=\"LABEL\" creates an\nadditional div with the output adjacent to the canvas, this is useful\nfor non-screen reader users that might want to display the output outside\nof the canvas' sub DOM as they code. However, using LABEL will create\nunnecessary redundancy for screen reader users. We recommend using LABEL\nonly as part of the development process of a sketch and removing it before\npublishing or sharing with screen reader users.",
              "type": {
                "text": "true|LABEL|FALLBACK"
              },
              "inheritedFrom": {
                "name": "addEnvironmentProps",
                "module": "src/properties/environment_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "inheritedFrom": {
                "name": "add3DTransformMethods",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addCanvasMethods",
              "module": "/src/methods/canvas_methods"
            },
            {
              "name": "addCanvasProperties",
              "module": "/src/properties/canvas_props"
            },
            {
              "name": "addP5PropsAndMethods",
              "module": "/src/core"
            },
            {
              "name": "addEnvironmentProps",
              "module": "/src/properties/environment_props"
            },
            {
              "name": "add3DTransformProps",
              "module": "/src/properties/transform_props"
            },
            {
              "name": "add3DTransformMethods",
              "module": "/src/methods/transform_methods"
            }
          ],
          "superclass": {
            "name": "HTMLCanvasElement",
            "module": "src/elements/canvas_elements.js"
          },
          "tagName": "p-canvas-3d",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-canvas",
          "declaration": {
            "name": "Canvas",
            "module": "src/elements/canvas_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-canvas-3d",
          "declaration": {
            "name": "WebGLCanvas",
            "module": "src/elements/canvas_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/color_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Clears the pixels within a buffer. This element only clears the canvas.\nIt will not clear objects created by create_x() functions such as\ncreate_video() or create_div().\nUnlike the main graphics context, pixels in additional graphics areas created\nwith create_graphics() can be entirely\nor partially transparent. This element clears everything to make all of\nthe pixels 100% transparent.\n\nNote: In WebGL mode, this element can have attributes set to normalized RGBA\ncolor values in order to clear the screen to a specific color.\nIn addition to color, it will also clear the depth buffer.\nIf you are not using the webGL renderer these color values will have no\neffect.",
          "name": "Clear",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\", \"r, g, b, a\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "Number"
              },
              "description": "normalized red val.",
              "name": "r"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "normalized green val.",
              "name": "g"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "normalized blue val.",
              "name": "b"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "normalized alpha val.",
              "name": "a"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "clear",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "The ```<paint-bucket>``` element fills the canvas with a particular color or\nimage.",
          "name": "PaintBucket",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"c\", \"colorstring, [a]\", \"gray, [a]\", \"v1, v2, v3, [a]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"background\"",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "p5.Color"
              },
              "description": "any value created by the <a href=\"#/p5/color\">color",
              "name": "color"
            },
            {
              "type": {
                "text": "String"
              },
              "description": "color string, possible formats include: integer rgb() or rgba(), percentage rgb() or rgba(), 3-digit hex, 6-digit hex",
              "name": "colorstring"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "opacity of the background relative to current color range (default is 0-255)",
              "name": "a"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "specifies a value between white and black",
              "name": "gray"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "red or hue value (depending on the current color mode)",
              "name": "v1"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "green or saturation value (depending on the current color mode)",
              "name": "v2"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": "blue or brightness value (depending on the current color mode)",
              "name": "v3"
            },
            {
              "type": {
                "text": "Number[]"
              },
              "description": "an array containing the red, green, blue and alpha components of the color",
              "name": "values"
            },
            {
              "type": {
                "text": "p5.Image"
              },
              "description": "image loaded via an ```<asset>``` (must be same size as the sketch window)",
              "name": "image"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "paint-bucket",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-clear",
          "declaration": {
            "name": "Clear",
            "module": "src/elements/color_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-paint-bucket",
          "declaration": {
            "name": "PaintBucket",
            "module": "src/elements/color_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/image_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Draw an image to the canvas.\n\nThis element can be used with different numbers of attributes. The\nsimplest use requires only three attributes: img, x, and y—where (x, y) is\nthe position of the image. Two more attributes can optionally be added to\nspecify the width and height of the image.\n\nThis element can also be used with eight Number attributes. To\ndifferentiate between all these attributes, p5.js uses the language of\n\"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\nimage\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n\"source image\" dimensions can be useful when you want to display a\nsubsection of the source image instead of the whole thing.\n\nThis element can also be used to draw images without distorting the original aspect ratio,\nby adding 9th attribute, fit, which can either be COVER or CONTAIN.\nCONTAIN, as the name suggests, contains the whole image within the specified destination box\nwithout distorting the image ratio.\nCOVER covers the entire destination box.",
          "name": "Image",
          "members": [
            {
              "kind": "field",
              "name": "#image_mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#tint",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\n    \"img, x, y, [width], [height]\",\n    \"img, dx, dy, dWidth, dHeight, sx, sy, [sWidth], [sHeight], [fit], [xAlign], [yAlign]\",\n  ]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "tint",
              "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with color_mode.\n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by color_mode. The default maximum value is\n255.",
              "type": {
                "text": "p5.Color"
              }
            },
            {
              "kind": "field",
              "name": "image_mode",
              "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which an image's properties are interpreted.\nThe default mode is image_mode=\"CORNER\", which interprets x and\ny as the upper-left corner of the image.\n\nimage_mode=\"CORNERS\" interprets x and y\nas the location of one corner, and width and height as the\nopposite corner.\n\nimage_mode=\"CENTER\" interprets x and y\nas the image's center point.",
              "type": {
                "text": "CORNER|CORNERS|CENTER"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "p-image",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-image",
          "declaration": {
            "name": "Image",
            "module": "src/elements/image_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/typography_elements.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Draws text on the ```<canvas>```. The content of the text may be specified\nby setting the content property\n```xml\n<text content=\"'Hello world'\"></text>\n```\nor by adding the content between the\nelement's start and end tags.\n```xml\n<text>Hello world</text>\n```\n\nChange the color of the text with the fill property. Change\nthe outline of the text with the stroke and\nstroke_weight properties.\n\nThe text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a>\nfunction, which gives the option to draw to the left, right, and center of the\ncoordinates.\n\nThe width and height properties, if specified, define a rectangular area to display within and\nmay only be used with string data. When these properties are specified,\nthey are interpreted based on the current rect_mode\nsetting. Text that does not fit completely within the rectangle specified will\nnot be drawn to the screen. If width and height are not specified, the baseline\nalignment is the default, which means that the text will be drawn upwards\nfrom x and y.",
          "name": "Text",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"content, x, y, [width], [height]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#align",
              "privacy": "private",
              "type": {
                "text": "array"
              },
              "default": "[p5.prototype.LEFT, p5.prototype.BASELINE]",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#leading",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "15",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#font",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"sans-serif\"",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#font_size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "12",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#style",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#wrap",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Sets the current alignment for drawing text. Accepts two\r\nvalues:\r\n- first: horizontal alignment (LEFT, CENTER, or RIGHT)\r\n- scond: vertical alignment (TOP, BOTTOM, CENTER, or BASELINE).\r\n\r\nSo if you set align=\"LEFT\", you are aligning the left\r\nedge of your text to this element's x-coordinate.\r\nIf you write align=\"RIGHT, TOP\", you are aligning the right edge\r\nof your text to this element's x-coordinate and the top edge of the text\r\nto this element's y-coordinate.",
              "type": {
                "text": "[LEFT|CENTER|RIGHT, TOP|BOTTOM|CENTER|BASELINE]"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "leading",
              "description": "Sets the spacing, in pixels, between lines of text.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "font",
              "description": "The current font used by this element. This may be set to a font loaded\r\nwith load_font() or a string representing a\r\n<a href=\"https://mzl.la/2dOw8WD\">web safe font</a>.",
              "type": {
                "text": "p5.Font"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "font_size",
              "description": "The font size in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "style",
              "description": "The style for text.",
              "type": {
                "text": "NORMAL|ITALIC|BOLDITALIC"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Specifies how lines of text are wrapped within a text box. This requires\r\nwidth to be set on this element.\r\n\r\nWORD wrap style only breaks lines at spaces. A single string without spaces\r\nthat exceeds the boundaries of the canvas or text area is not truncated,\r\nand will overflow the desired area, disappearing at the canvas edge.\r\n\r\nCHAR wrap style breaks lines wherever needed to stay within the text box.\r\n\r\nWORD is the default wrap style, and both styles will still break lines at\r\nany line breaks specified in the original text. The text height property also\r\nstill applies to wrapped text in both styles, lines of text that do not fit\r\nwithin the text area will not be drawn to the screen.",
              "type": {
                "text": "WORD|CHAR"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ascent",
              "description": "The ascent of the current font at its current size. The ascent represents the\r\ndistance, in pixels, of the tallest character above the baseline. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "descent",
              "description": "The descent of the current font at its current size. The descent represents the\r\ndistance, in pixels, of the character with the longest descender below the baseline.\r\n(read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\"",
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              },
              "inheritedFrom": {
                "name": "add2DStrokeStyling",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFillStroke",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addTypographyProps",
              "module": "/src/properties/typography_props"
            },
            {
              "name": "add2DStrokeStyling",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "add2DTransformProps",
              "module": "/src/properties/transform_props"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "text",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Draws text on the ```<canvas-3d>```. The content of the text may be specified\nby setting the content property\n```xml\n<text content=\"'Hello world'\"></text>\n```\nor by adding the content between the\nelement's start and end tags.\n```xml\n<text>Hello world</text>\n```\n\nChange the color of the text with the fill property. Text on a 3D canvas does not\nhave a stroke property.\n\nThe text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a>\nfunction, which gives the option to draw to the left, right, and center of the\ncoordinates.\n\nThe width and height properties, if specified, define a rectangular area to display within and\nmay only be used with string data. When these properties are specified,\nthey are interpreted based on the current rect_mode\nsetting. Text that does not fit completely within the rectangle specified will\nnot be drawn to the screen. If width and height are not specified, the baseline\nalignment is the default, which means that the text will be drawn upwards\nfrom x and y.",
          "name": "Text3D",
          "members": [
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"content, x, y, [width], [height]\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addWidthHeight",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "font",
              "description": "The current font used by this element. This must be loaded\nwith load_font().",
              "type": {
                "text": "p5.Font"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#align",
              "privacy": "private",
              "type": {
                "text": "array"
              },
              "default": "[p5.prototype.LEFT, p5.prototype.BASELINE]",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#leading",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "15",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#font",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"sans-serif\"",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#font_size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "12",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#style",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#wrap",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Sets the current alignment for drawing text. Accepts two\r\nvalues:\r\n- first: horizontal alignment (LEFT, CENTER, or RIGHT)\r\n- scond: vertical alignment (TOP, BOTTOM, CENTER, or BASELINE).\r\n\r\nSo if you set align=\"LEFT\", you are aligning the left\r\nedge of your text to this element's x-coordinate.\r\nIf you write align=\"RIGHT, TOP\", you are aligning the right edge\r\nof your text to this element's x-coordinate and the top edge of the text\r\nto this element's y-coordinate.",
              "type": {
                "text": "[LEFT|CENTER|RIGHT, TOP|BOTTOM|CENTER|BASELINE]"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "leading",
              "description": "Sets the spacing, in pixels, between lines of text.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "font_size",
              "description": "The font size in pixels.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "style",
              "description": "The style for text.",
              "type": {
                "text": "NORMAL|ITALIC|BOLDITALIC"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Specifies how lines of text are wrapped within a text box. This requires\r\nwidth to be set on this element.\r\n\r\nWORD wrap style only breaks lines at spaces. A single string without spaces\r\nthat exceeds the boundaries of the canvas or text area is not truncated,\r\nand will overflow the desired area, disappearing at the canvas edge.\r\n\r\nCHAR wrap style breaks lines wherever needed to stay within the text box.\r\n\r\nWORD is the default wrap style, and both styles will still break lines at\r\nany line breaks specified in the original text. The text height property also\r\nstill applies to wrapped text in both styles, lines of text that do not fit\r\nwithin the text area will not be drawn to the screen.",
              "type": {
                "text": "WORD|CHAR"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ascent",
              "description": "The ascent of the current font at its current size. The ascent represents the\r\ndistance, in pixels, of the tallest character above the baseline. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "descent",
              "description": "The descent of the current font at its current size. The descent represents the\r\ndistance, in pixels, of the character with the longest descender below the baseline.\r\n(read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addTypographyProps",
                "module": "src/properties/typography_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private",
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "add3DProps",
                "module": "src/properties/3d_props.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "description": "object containing attribute values passed\ndown from parent element",
                  "name": "inherited",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addWidthHeight",
              "module": "/src/properties/shape_props"
            },
            {
              "name": "addFill",
              "module": "/src/properties/color_props"
            },
            {
              "name": "addFont3D",
              "module": "src/elements/typography_elements.js"
            },
            {
              "name": "addTypographyProps",
              "module": "/src/properties/typography_props"
            },
            {
              "name": "add3DTransformProps",
              "module": "/src/properties/transform_props"
            },
            {
              "name": "add3DProps",
              "module": "/src/properties/3d_props"
            },
            {
              "name": "addWebGLMethods",
              "module": "/src/methods/3d_methods"
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          },
          "tagName": "text",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "p-text",
          "declaration": {
            "name": "Text",
            "module": "src/elements/typography_elements.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-text-3d",
          "declaration": {
            "name": "Text3D",
            "module": "src/elements/typography_elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/interpreter/interpreter.js",
      "declarations": [
        {
          "kind": "function",
          "name": "interpret",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "attrName"
            },
            {
              "name": "attrValue"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "interpret",
          "declaration": {
            "name": "interpret",
            "module": "src/interpreter/interpreter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/interpreter/lexer.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "tokenKind",
          "type": {
            "text": "object"
          },
          "default": "{\n  number: \"number\",\n  property: \"property\",\n  member: \"member\",\n  boolean: \"boolean\",\n  additive: \"additive\",\n  multiplicative: \"multiplicative\",\n  not: \"not\",\n  comparison: \"comparison\",\n  equality: \"equality\",\n  string: \"string\",\n  constant: \"constant\",\n  logical: \"logical\",\n  until: \"until\",\n  end: \"end\",\n}"
        },
        {
          "kind": "variable",
          "name": "endToken"
        },
        {
          "kind": "function",
          "name": "lex",
          "parameters": [
            {
              "name": "str"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tokenKind",
          "declaration": {
            "name": "tokenKind",
            "module": "src/interpreter/lexer.js"
          }
        },
        {
          "kind": "js",
          "name": "endToken",
          "declaration": {
            "name": "endToken",
            "module": "src/interpreter/lexer.js"
          }
        },
        {
          "kind": "js",
          "name": "lex",
          "declaration": {
            "name": "lex",
            "module": "src/interpreter/lexer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/interpreter/parser.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parse",
          "parameters": [
            {
              "name": "element"
            },
            {
              "name": "attrName"
            },
            {
              "name": "fullListOfTokens"
            },
            {
              "name": "debug",
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parse",
          "declaration": {
            "name": "parse",
            "module": "src/interpreter/parser.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/3d_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addWebGLMethods",
          "members": [
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addWebGLMethods",
          "declaration": {
            "name": "addWebGLMethods",
            "module": "src/methods/3d_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/canvas_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addCanvasMethods",
          "members": [
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName"
                }
              ]
            },
            {
              "kind": "method",
              "name": "runCode"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addCanvasMethods",
          "declaration": {
            "name": "addCanvasMethods",
            "module": "src/methods/canvas_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/collide_methods.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "{ collider_type }",
          "default": "Collide"
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addCollide",
          "members": [
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>"
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "{ collider_type }",
          "declaration": {
            "name": "{ collider_type }",
            "module": "src/methods/collide_methods.js"
          }
        },
        {
          "kind": "js",
          "name": "addCollide",
          "declaration": {
            "name": "addCollide",
            "module": "src/methods/collide_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/color_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addColorMethods",
          "members": [
            {
              "kind": "method",
              "name": "lerp_color"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addColorMethods",
          "declaration": {
            "name": "addColorMethods",
            "module": "src/methods/color_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/data_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addDataMethods",
          "members": [
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addDataMethods",
          "declaration": {
            "name": "addDataMethods",
            "module": "src/methods/data_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/math_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addMathMethods",
          "members": [
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addMathMethods",
          "declaration": {
            "name": "addMathMethods",
            "module": "src/methods/math_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/shape_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addBezierMethods",
          "members": [
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the bezier at t. t is the\nresultant point which is given between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the Bezier at position t.\nt is between 0 (start of Bezier) and 1 (end of Bezier).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addCurveMethods",
          "members": [
            {
              "kind": "method",
              "name": "point_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the position on the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              }
            },
            {
              "kind": "method",
              "name": "tangent_at",
              "parameters": [
                {
                  "name": "t",
                  "description": "value between 0 and 1",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Evaluates the tangent to the curve at t.\nt is between 0 (start of curve) and 1 (end of curve).",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addBezierMethods",
          "declaration": {
            "name": "addBezierMethods",
            "module": "src/methods/shape_methods.js"
          }
        },
        {
          "kind": "js",
          "name": "addCurveMethods",
          "declaration": {
            "name": "addCurveMethods",
            "module": "src/methods/shape_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/methods/transform_methods.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "add2DTransformMethods",
          "members": [
            {
              "kind": "field",
              "name": "#transform_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()"
            },
            {
              "kind": "field",
              "name": "transform_matrix",
              "description": "transform_matrix stores the result of all the transformation\nproperties applied to this element. (read-only)",
              "type": {
                "text": "DOMMatrix"
              }
            },
            {
              "kind": "method",
              "name": "transform",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addPositionConverters",
              "module": "src/methods/transform_methods.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "add3DTransformMethods",
          "members": [
            {
              "kind": "method",
              "name": "transform"
            },
            {
              "kind": "method",
              "name": "canvas_to_local_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "canvas_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position on the canvas to a position in\nthis element's transformed space.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            },
            {
              "kind": "method",
              "name": "local_to_canvas_position",
              "parameters": [
                {
                  "name": "x",
                  "default": "0"
                },
                {
                  "name": "y",
                  "default": "0"
                },
                {
                  "name": "z",
                  "default": "0"
                },
                {
                  "name": "local_position",
                  "type": {
                    "text": "p5.Vector"
                  }
                }
              ],
              "description": "Converts a position in this element's transformed space to a\nposition on the canvas.",
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "addPositionConverters",
                "module": "src/methods/transform_methods.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addPositionConverters",
              "module": "src/methods/transform_methods.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "add2DTransformMethods",
          "declaration": {
            "name": "add2DTransformMethods",
            "module": "src/methods/transform_methods.js"
          }
        },
        {
          "kind": "js",
          "name": "add3DTransformMethods",
          "declaration": {
            "name": "add3DTransformMethods",
            "module": "src/methods/transform_methods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/caseConvert.js",
      "declarations": [
        {
          "kind": "function",
          "name": "camelToKebab",
          "parameters": [
            {
              "name": "camelStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "camelToSnake",
          "parameters": [
            {
              "name": "camelStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "kebabToCamel",
          "parameters": [
            {
              "name": "kebabStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "pascalToCamel",
          "parameters": [
            {
              "name": "pascalStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "pascalToKebab",
          "parameters": [
            {
              "name": "pascalStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "pascalToSnake",
          "parameters": [
            {
              "name": "pascalStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "snakeToCamel",
          "parameters": [
            {
              "name": "snakeStr"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "camelToKebab",
          "declaration": {
            "name": "camelToKebab",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "camelToSnake",
          "declaration": {
            "name": "camelToSnake",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "kebabToCamel",
          "declaration": {
            "name": "kebabToCamel",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "pascalToCamel",
          "declaration": {
            "name": "pascalToCamel",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "pascalToKebab",
          "declaration": {
            "name": "pascalToKebab",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "pascalToSnake",
          "declaration": {
            "name": "pascalToSnake",
            "module": "src/utils/caseConvert.js"
          }
        },
        {
          "kind": "js",
          "name": "snakeToCamel",
          "declaration": {
            "name": "snakeToCamel",
            "module": "src/utils/caseConvert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/p5Modifiers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defineProperties",
          "parameters": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "kind": "function",
          "name": "wrapMethod",
          "parameters": [
            {
              "name": "methodName"
            },
            {
              "name": "wrapper"
            }
          ]
        },
        {
          "kind": "function",
          "name": "defineSnakeAlias",
          "parameters": [
            {
              "name": "propNames"
            }
          ]
        },
        {
          "kind": "function",
          "name": "defineRendererGetterSetters",
          "parameters": [
            {
              "name": "methodNames"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineProperties",
          "declaration": {
            "name": "defineProperties",
            "module": "src/utils/p5Modifiers.js"
          }
        },
        {
          "kind": "js",
          "name": "wrapMethod",
          "declaration": {
            "name": "wrapMethod",
            "module": "src/utils/p5Modifiers.js"
          }
        },
        {
          "kind": "js",
          "name": "defineSnakeAlias",
          "declaration": {
            "name": "defineSnakeAlias",
            "module": "src/utils/p5Modifiers.js"
          }
        },
        {
          "kind": "js",
          "name": "defineRendererGetterSetters",
          "declaration": {
            "name": "defineRendererGetterSetters",
            "module": "src/utils/p5Modifiers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/dom.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/environment.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/events.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/io.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/rendering.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/modules/structure.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/3d_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "add3DProps",
          "members": [
            {
              "kind": "field",
              "name": "#ambient_material",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#emissive_material",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#shininess",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#specular_material",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#no_lights",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "ambient_material",
              "description": "Sets the ambient color of the material.\n\nThe ambient_material color is the color the object will reflect\nunder **any** lighting.\n\nConsider an ambient_material with the color yellow (255, 255, 0).\nIf the light emits the color white (255, 255, 255), then the object\nwill appear yellow as it will reflect the red and green components\nof the light. If the light emits the color red (255, 0, 0), then\nthe object will appear red as it will reflect the red component\nof the light. If the light emits the color blue (0, 0, 255),\nthen the object will appear black, as there is no component of\nthe light that it can reflect.",
              "type": {
                "text": "p5.Color"
              }
            },
            {
              "kind": "field",
              "name": "emissive_material",
              "description": "Sets the emissive color of the material.\n\nAn emissive material will display the emissive color at\nfull strength regardless of lighting. This can give the\nappearance that the object is glowing.\n\nNote, \"emissive\" is a misnomer in the sense that the material\ndoes not actually emit light that will affect surrounding objects.",
              "type": {
                "text": "p5.Color"
              }
            },
            {
              "kind": "field",
              "name": "normal_material",
              "description": "Sets the current material as a normal material.\n\nA normal material is not affected by light. It is often used as\na placeholder material when debugging.\n\nSurfaces facing the X-axis become red, those facing the Y-axis\nbecome green, and those facing the Z-axis become blue.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "shader",
              "description": "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\nbe used to render subsequent shapes.\n\nCustom shaders can be created using the\ncreate_shader() method and\n```<shader>``` element.\n\nSet shader=\"DEFAULT\" to restore the default shaders.\n\nNote, shaders can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Shader"
              }
            },
            {
              "kind": "field",
              "name": "shininess",
              "description": "Sets the amount of gloss (\"shininess\") of a\nspecular_material.\n\nThe default and minimum value is 1.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "specular_material",
              "description": "Sets the specular color of the material.\n\nA specular material is reflective (shiny). The shininess can be\ncontrolled by the shininess property.\n\nLike ambient_material,\nthe specular_material color is the color the object will reflect\nunder ```<ambient-light>```.\nHowever unlike ambient_material, for all other types of lights\n```<directional-light>```,\n```<point-light>```,\n```spot-light>```,\na specular material will reflect the **color of the light source**.\nThis is what gives it its \"shiny\" appearance.",
              "type": {
                "text": "p5.Color"
              }
            },
            {
              "kind": "field",
              "name": "texture",
              "description": "Sets the texture that will be used to render subsequent shapes.\n\nA texture is like a \"skin\" that wraps around a 3D geometry. Currently\nsupported textures are images, video, and offscreen renders.\n\nTo texture a geometry created by a ```<shape>``` element,\nyou will need to specify uv coordinates in ```<vertex>``` element.\n\nNote, texture can only be used in WEBGL mode.",
              "type": {
                "text": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
              }
            },
            {
              "kind": "field",
              "name": "texture_mode",
              "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\n\nWith IMAGE, if an image is 100×200 pixels, mapping the image onto the\nentire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
              "type": {
                "text": "IMAGE|NORMAL"
              }
            },
            {
              "kind": "field",
              "name": "texture_wrap",
              "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds.\nREPEAT causes the texture to tile repeatedly until reaching the bounds.\nMIRROR works similarly to REPEAT but it flips the texture with every new tile.\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until another element\nsets texture_mode.\n\nIf only one value is provided, it will be applied to both the\nhorizontal and vertical axes.",
              "type": {
                "text": "[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]"
              }
            },
            {
              "kind": "field",
              "name": "no_lights",
              "description": "Removes all lights present in a sketch.\n\nAll subsequent geometry is rendered without lighting (until a new\nlight is created with a lighting element (\n```<lights>```,\n```<ambient-light>```,\n```<directional-light>```,\n```<point-light>```,\n```<spot-light>```).",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "WebGLLight",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "description": "Updates the element's attribute values, renders it to the canvas, and\ncalls the draw method on its children.",
              "parameters": [
                {
                  "name": "inherited"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "overloads",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\"\"]",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#getArgumentsFromOverloads",
              "description": "Sets the parameters used to call this element's render function based\non the overloads for that function and this element's attributes.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setupRenderFunction",
              "privacy": "private",
              "description": "",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "renderFunctionName",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RenderedElement",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#canvas",
              "privacy": "private",
              "description": "This element's parent canvas.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#frame_created",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#pInst",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#proxy",
              "privacy": "private",
              "default": "new Proxy(this, {\n      get(target, prop) {\n        return target[prop];\n      },\n      has(target, prop) {\n        return prop in target;\n      },\n      set(target, prop, val) {\n        return target.set(prop, val);\n      },\n    })",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#updateFunctions",
              "privacy": "private",
              "default": "new Map()",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#name",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#on",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#repeat",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#change",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "on",
              "description": "The on property determines whether this element and its children\nare updated and rendered.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_sibling",
              "description": "Proxy for the sibling element above this element with access to its\nproperties, methods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "above_siblings_off",
              "description": "True if siblings directly above this element with an \"on\" attribute have\n\"on\" set to false. This can be used to switch between elements based on\nconditions, similar to if/else.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#applyChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "attributeInherited",
              "parameters": [
                {
                  "name": "attributeName",
                  "description": "name of the attribute to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Checks if the provided attribute name belongs to a parent element. If\nthe attribute refers to an object property, this will check for an\nattribute with a name that matches the object.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "blend_mode",
              "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.\n<em>(2D)</em></li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
              "type": {
                "text": "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#callAttributeUpdater",
              "parameters": [
                {
                  "name": "attrName"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "description": "The parent canvas for this element",
              "type": {
                "text": "HTMLCanvasElement"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "color_mode",
              "description": "color_mode changes the way p5.js interprets\ncolor data. By default, fill,\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\nby values between 0 and 255 using the RGB color model. This is equivalent\nto setting color_mode=\"RGB, 255\".\nSetting color_mode=\"HSB\" lets you use the HSB system instead. By default,\nthis is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
              "type": {
                "text": "RGB|HSB|HSL"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#comments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "description": "The text content of the element and its children. If a $ is followed by\nthe name of a property (such as $blend_mode), it will be replaced by the\nvalue of the property.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "drawing_context",
              "description": "The p5.js API provides a lot of functionality for creating graphics, but\nthere is some native HTML5 Canvas functionality that is not exposed by\np5.\n\nYou can still assign to\nit directly using the property `drawing_context`. This is\nthe equivalent of calling `canvas.getContext('2d');` or\n`canvas.getContext('webgl');` and then calling Object.assign on the\nresult.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions\nyou can call.\n\n```xml\n<_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\nshadowColor: 'black'\" />\n```",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "elementName",
              "static": true,
              "description": "Name of the HTML element generated from this class.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "erase",
              "description": "With erase=\"true\", this element and all elements rendered after it will\nsubtract from the canvas. Erased areas will reveal the web page\nunderneath the canvas. This may be canceled with erase=\"false\"\n\nArguments for the optional parameters to\n<a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\nmay also be provided as a comma separated list.\n\n```<p-image>``` elements will not erase the canvas but works as usual.",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "first_frame",
              "description": "first_frame is true if the element was just created.\nThis can be used for setup. For example,\n```xml\n<_ rand_ball=\"this_element\">\n <_ on=\"first_frame\"\n    rand_ball.x=\"random(canvas.width)\"\n    rand_ball.y=\"random(canvas.height)\"></_>\n  <circle></circle>\n</_>\n```\nSets the ```<_>```'s x-coordinate to a random position along the\ncanvas when it is first created. The value then stays the same.\nAs a result, the circle is played at that random position.\n(read-only)",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "frame_count",
              "description": "frame_count counts the number of frames this element has been\nrendered. The first time this element is rendered, frame_count\nwith be 1. (read-only)",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#html",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames",
              "description": "List of attribute names in the order in which they will be evaluated.\nElement attributes are not guaranteed to be in the order in which they\nare written. Transformation attributes are prioritized before others\nand use this order: anchor, angle, scale_factor, shear.",
              "type": {
                "text": "Array"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "description": "Proxy for this element's parent element with access to its properties,\nmethods, and attributes.",
              "type": {
                "text": "proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "pInst",
              "description": "This element's p5 instance.",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "repeat",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets an attribute's value on this element.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "parameters": [
                {
                  "name": "pInst",
                  "type": {
                    "text": "p5"
                  }
                },
                {
                  "name": "canvas"
                }
              ],
              "description": "Sets this element up with a p5 instance and sets up its children.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFn",
              "parameters": [
                {
                  "name": "attr"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#setupEvalFns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#customAttributeToProperty",
              "parameters": [
                {
                  "name": "propName"
                }
              ],
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "this_element",
              "description": "This element's proxy with access to properties, methods, and attributes.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAttribute",
              "parameters": [
                {
                  "name": "attrName",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "inherited",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "thisArg",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "updateState",
              "description": "Updates the values of all attributes using the provided expressions.",
              "parameters": [
                {
                  "description": "object",
                  "name": "inherited",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "webgl_attributes",
              "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif set after the WebGL canvas is made.\n\nIf webgl_attributes is set to an object, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is false\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "lerp_color",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_camera",
              "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\nas the current (active) camera.\n\nThe new camera is initialized with a default position\n(see camera property)\nand a default perspective projection\n(see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\nIts properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\nmethods.\n\nNote: Every 3D sketch starts with a default camera initialized.\nThis camera can be controlled with the canvas properties\ncamera,\nperspective, ortho,\nand frustum if it is the only camera\nin the scene.",
              "return": {
                "type": {
                  "text": "p5.Camera"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_shader",
              "description": "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.\n\nNote, shaders can only be used in WEBGL mode.",
              "parameters": [
                {
                  "description": "source code for the vertex shader",
                  "name": "vertSrc",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "source code for the fragment shader",
                  "name": "fragSrc",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Shader"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "acceleration",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "device_rotation",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "collide",
              "default": "new Collide(this)",
              "description": "The collide object provides collision detection methods for different\nshapes. These methods are adapted from\n<a href=\"https://github.com/bmoren\">Ben Moren's</a>\n<a href=\"https://github.com/bmoren/p5.collide2D\">Collide2D library</a>.\nThese links are written how these methods would be called in Marker, and\nthey link to the documentation for their corresponding Collide2D\nfunction, which has the same parameters:\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoint\">\ncollide.point_point()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointcircle\">\ncollide.point_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointellipse\">\ncollide.point_ellipse()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointrect\">\ncollide.point_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointline\">\ncollide.point_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointarc\">\ncollide.point_arc()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectrect\">\ncollide.rect_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclecircle\">\ncollide.circle_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectcircle\">\ncollide.rect_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelineline\">\ncollide.line_line()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinecircle\">\ncollide.line_circle()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinerect\">\ncollide.line_rect()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointpoly\">\ncollide.point_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidecirclepoly\">\ncollide.circle_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#colliderectpoly\">\ncollide.rect_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidelinepoly\">\ncollide.line_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepolypoly\">\ncollide.poly_poly()</a>\n- <a href=\"https://github.com/bmoren/p5.collide2D#collidepointtriangle\">\ncollide.point_triangle()</a>",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "colliding_with",
              "parameters": [
                {
                  "name": "el",
                  "description": "other element to check",
                  "type": {
                    "text": "P5Element"
                  }
                }
              ],
              "description": "Checks if this element is colliding with the provided other element.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "vector",
              "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
              "parameters": [
                {
                  "description": "x component of the vector",
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "y component of the vector",
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "z component of the vector",
                  "name": "z",
                  "optional": true,
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.Vector"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_mode",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math.",
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_string_dict",
              "description": "\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.StringDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            },
            {
              "kind": "method",
              "name": "create_number_dict",
              "description": "\nCreates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\nor object you provide.",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "description": "key-value pairs",
                  "name": "object",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "p5.NumberDict"
                }
              },
              "inheritedFrom": {
                "name": "P5Element",
                "module": "src/core.js"
              }
            }
          ],
          "superclass": {
            "name": "RenderedElement",
            "module": "/src/core"
          }
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addSpecularColor",
          "members": [
            {
              "kind": "field",
              "name": "#specular_color",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "specular_color",
              "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except ```<ambient-light>```).\n\nspecular_color affects only the lights which are created by\nthis element or its children\n\nThis property is used in combination with\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\nIf a geometry does not use specular_material, this property\nwill have no effect.\n\nThe default color is white (255, 255, 255), which is used if\nspecular_color is not explicitly set.\n\nNote: specular_color is equivalent to the Processing function\n<a href=\"https://processing.org/reference/lightSpecular_.\nhtml\">lightSpecular</a>.",
              "type": {
                "text": "p5.Color"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addLightFalloff",
          "members": [
            {
              "kind": "field",
              "name": "#light_falloff",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "light_falloff",
              "description": "Sets the falloff rate for ```<point-light>```\nand ```<spot-light>```.\n\nlight_falloff affects only this element and its children.\n\nThe values are `constant`, `linear`, an `quadratic` and are used to calculate falloff as follows:\n\nd = distance from light position to vertex position\n\nfalloff = 1 / (CONSTANT + d \\* LINEAR + (d \\* d) \\* QUADRATIC)",
              "type": {
                "text": "[number, number, number]"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addRectMode",
          "members": [
            {
              "kind": "field",
              "name": "#rect_mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rect_mode",
              "description": "Modifies the location from which rectangles are drawn by changing the way\nin which x and y coordinates are interpreted.\n\nThe default mode is CORNER, which interprets the x and y as the\nupper-left corner of the shape.\n\nrect_mode=\"CORNERS\" interprets x and y as the location of\none of the corners, and width and height as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not necessary that the first corner be the upper left\ncorner.\n\nrect_mode=\"CENTER\" interprets x and y as the shape's center\npoint.\n\nrect_mode=\"RADIUS\" also uses x and y as the shape's\ncenter\npoint, but uses width and height to specify half of the shape's\nwidth and height respectively.\n\nThe value to this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "CORNER|CORNERS|CENTER|RADIUS"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "add3DShapeStyling",
          "members": [
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. On a 3D canvas, smooth is false\nby default, so it is necessary to set smooth=\"true\" if you would like\nsmooth (antialiased) edges on your geometry.",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "add3DProps",
          "declaration": {
            "name": "add3DProps",
            "module": "src/properties/3d_props.js"
          }
        },
        {
          "kind": "js",
          "name": "WebGLLight",
          "declaration": {
            "name": "WebGLLight",
            "module": "src/properties/3d_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addSpecularColor",
          "declaration": {
            "name": "addSpecularColor",
            "module": "src/properties/3d_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addLightFalloff",
          "declaration": {
            "name": "addLightFalloff",
            "module": "src/properties/3d_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addRectMode",
          "declaration": {
            "name": "addRectMode",
            "module": "src/properties/3d_props.js"
          }
        },
        {
          "kind": "js",
          "name": "add3DShapeStyling",
          "declaration": {
            "name": "add3DShapeStyling",
            "module": "src/properties/3d_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/canvas_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addCanvasProperties",
          "members": [
            {
              "kind": "field",
              "name": "#background",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "background",
              "description": "The background property sets the color or image used\nfor the background of the p5.js canvas. The default background is transparent.\nA <a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object can be provided to set the background color.\n\nA <a href=\"https://p5js.org/reference/#/p5.Image\">p5.Image</a> can also be provided to set the background image.\n\nThe arguments to <a href=\"https://p5js.org/reference/#/p5/color\">color()</a> can also be provided,\nseparated by commas.",
              "type": {
                "text": "p5.Color|p5.Image"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Sets the cursor when hovering over the canvas.\n\nYou can set cursor to any of the following constants:\nARROW, CROSS, HAND, MOVE, TEXT and WAIT\n\nYou may also set cursor to the URL of an image file. The recommended size\nis 16x16 or 32x32 pixels. (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n\nFor more information on Native CSS cursors and url visit:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n\nYou may also set cursor to \"type, x, y\", where type is one of the types above,\nx is the horizontal active spot of the cursor (must be less than 32)\nand\ny is the vertical active spot of the cursor (must be less than 32)",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the canvas in pixels.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "orderedAttributeNames"
            },
            {
              "kind": "field",
              "name": "pixels",
              "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixel_density) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh density displays may have more pixels (by a factor of\npixel_density^2).\nFor example, if the image is 100×100 pixels, there will be 40,000. With\npixel_density = 2, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0).",
              "type": {
                "text": "number[]"
              }
            },
            {
              "kind": "field",
              "name": "loop"
            },
            {
              "kind": "method",
              "name": "#resize",
              "parameters": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the canvas in pixels.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addCanvasProperties",
          "declaration": {
            "name": "addCanvasProperties",
            "module": "src/properties/canvas_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/color_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addStroke",
          "members": [
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\""
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addFill",
          "members": [
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\""
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addFillStroke",
          "mixins": [
            {
              "name": "addFill",
              "module": "src/properties/color_props.js"
            },
            {
              "name": "addStroke",
              "module": "src/properties/color_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#fill",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#fff\"",
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Sets the color used to fill shapes. This may be a\n<a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\na comma separated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addFill",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"#000\"",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#stroke_weight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke",
              "description": "Sets the color used to draw lines and borders around shapes. This color\nis either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\nseparated list of values to pass into\n<a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.",
              "type": {
                "text": "p5.Color"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            },
            {
              "kind": "field",
              "name": "stroke_weight",
              "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.\n\nNote that it is affected by any transformation or scaling that has\nbeen applied previously.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addStroke",
                "module": "src/properties/color_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addColorVals",
          "members": [
            {
              "kind": "field",
              "name": "#v1",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#v2",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#v3",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "v1",
              "description": "red or hue value using current color_mode",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "v2",
              "description": "green or saturation value using current color_mode",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "v3",
              "description": "blue, brightness, or lightness value using current color_mode",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addStroke",
          "declaration": {
            "name": "addStroke",
            "module": "src/properties/color_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addFill",
          "declaration": {
            "name": "addFill",
            "module": "src/properties/color_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addFillStroke",
          "declaration": {
            "name": "addFillStroke",
            "module": "src/properties/color_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addColorVals",
          "declaration": {
            "name": "addColorVals",
            "module": "src/properties/color_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/constants.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "constants",
          "type": {
            "text": "object"
          },
          "default": "{\r\n  NONE: \"none\",\r\n  CORNER: \"corner\",\r\n  CORNERS: \"corners\",\r\n  CENTER: \"center\",\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "constants",
          "declaration": {
            "name": "constants",
            "module": "src/properties/constants.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/data_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addStorage",
          "members": [
            {
              "kind": "field",
              "name": "storage",
              "description": "The storage property allows data to be saved in local storage on\nthe device displaying the sketch. This data will remain until the\nuser clears local storage, so you can use this to remember something\nbetween uses, such as the high score of a game.\n\nTo store something, simply add a custom property to storage:\n```xml\n<_ storage.my_property=\"123\" />\n```\nAny element can reference that property.\n```xml\n<square x=\"storage.my_property\" />\n```\nTo clear the storage, call the clear method on storage.\n```xml\n<_ _=\"storage.clear()\" />\n```\nTo remove a property, call the remove method and pass in the name\nof the property as a string.\n```xml\n<_ _=\"storage.remove('my_property')\" />\n```",
              "type": {
                "text": "Proxy"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addStorage",
          "declaration": {
            "name": "addStorage",
            "module": "src/properties/data_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/environment_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addEnvironmentProps",
          "members": [
            {
              "kind": "field",
              "name": "fullscreen"
            },
            {
              "kind": "field",
              "name": "frame_rate",
              "description": "frame_rate specifies the number of frames to be displayed every second.\nFor example,\nframe_rate=\"30\" will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"),\nwhich is set to 60 frames per second on most computers.\nA frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth\nanimations.\n\nThe canvas must be rendered at least once for frame_rate to have a\nvalue.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "pixel_density",
              "description": "pixel_density specifies the pixel scaling for high pixel density displays.\nBy default pixel density is set to match display density, set pixel_density=\"1\"\nto turn this off.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "display_density",
              "description": "The pixel density of the current display the sketch is running on. (read-only)",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "delta_time",
              "description": "The delta_time property contains the time\ndifference between the beginning of the previous frame and the beginning\nof the current frame in milliseconds.\n\nThis variable is useful for creating time sensitive animation or physics\ncalculation that should stay constant regardless of frame rate.\n(read-only)",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "screen",
              "description": "screen stores information about the screen displaying the canvas.\nTo get the dimensions of the screen, use:\n```\nscreen.width\nscreen.height\n```\nscreen is available in any browser and is not specific to this\nlibrary.\nThe full documentation is here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Screen\n(read-only)"
            },
            {
              "kind": "field",
              "name": "window",
              "description": "The window object provides information about the window containing the\ncanvas.\n- window.width   - number: width of the window\n- window.height  - number: height of the window\n- window.resized - boolean: true if the window was resized since last\nframe",
              "type": {
                "text": "Object"
              }
            },
            {
              "kind": "field",
              "name": "#window",
              "privacy": "private",
              "default": "new Window(this)"
            },
            {
              "kind": "field",
              "name": "grid_output",
              "description": "grid_output lays out the\ncontent of the canvas in the form of a grid (html table) based\non the spatial location of each shape. A brief\ndescription of the canvas is available before the table output.\nThis description includes: color of the background, size of the canvas,\nnumber of objects, and object types (example: \"lavender blue canvas is\n200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid\ndescribes the content spatially, each element is placed on a cell of the\ntable depending on its position. Within each cell an element the color\nand type of shape of that element are available (example: \"orange ellipse\").\nThese descriptions can be selected individually to get more details.\nA list of elements where shape, color, location, and area are described\n(example: \"orange ellipse location=top left area=1%\") is also available.\n\ngrid_output=\"true\" and grid_output=\"FALLBACK\"\nmake the output available in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\na sub DOM inside the canvas element</a> which is accessible to screen readers.\ngrid_output=\"LABEL\" creates an\nadditional div with the output adjacent to the canvas, this is useful\nfor non-screen reader users that might want to display the output outside\nof the canvas' sub DOM as they code. However, using LABEL will create\nunnecessary redundancy for screen reader users. We recommend using LABEL\nonly as part of the development process of a sketch and removing it before\npublishing or sharing with screen reader users.",
              "type": {
                "text": "true|LABEL|FALLBACK"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addEnvironmentProps",
          "declaration": {
            "name": "addEnvironmentProps",
            "module": "src/properties/environment_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/event_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addEventProps",
          "members": [
            {
              "kind": "field",
              "name": "mouse",
              "description": "The mouse object contains infromation about the current position\r\nand movement of the mouse:\r\n- mouse.x - x-coordinate relative to upper left of canvas\r\n- mouse.y - y-coordinate relative to upper left of canvas\r\n- mouse.previous.x - x-coordinate in previous frame\r\n- mouse.previous.y - y-coordinate in previous frame\r\n- mouse.window.x - x-coordinate relative to upper left of window\r\n- mouse.window.y - y-coordinate relative to upper left of window\r\n- mouse.window.previous.x - window x-coordinate in previous frame\r\n- mouse.window.previous.y - window y-coordinate in previous frame\r\n- mouse.moved.x - horizontal movement of the mouse since last frame\r\n- mouse.moved.y - vertical movement of the mouse since last frame\r\n- mouse.pressed - boolean that is true while the mouse button is held down\r\n- mouse.dragging - boolean that true while the mouse is pressed and moving\r\n- mouse.button - which mouse button is currently pressed: LEFT, RIGHT, CENTER,\r\n   or 0 for none.",
              "type": {
                "text": "Object"
              }
            },
            {
              "kind": "field",
              "name": "acceleration"
            },
            {
              "kind": "field",
              "name": "device_rotation"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addEventProps",
          "declaration": {
            "name": "addEventProps",
            "module": "src/properties/event_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/math_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addMathProps",
          "members": [
            {
              "kind": "field",
              "name": "#angle_mode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#perlin_octaves",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4"
            },
            {
              "kind": "field",
              "name": "#perlin_amp_falloff",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "#noise_seed",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#random_seed",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "angle_mode"
            },
            {
              "kind": "field",
              "name": "math",
              "description": "math provides access to the built-in Math object available on browsers.\nThe reference for the Math object is available at\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math."
            },
            {
              "kind": "field",
              "name": "noise_detail",
              "description": "Adjusts the character and level of detail produced by the Perlin noise\nmethod. This must be set to a comma-separated list of 2 numbers:\n1. lod: number of octaves to be used by the noise\n2. falloff:  falloff factor for each octave\n\nSimilar to harmonics in physics, noise is computed over\nseveral octaves. Lower octaves contribute more to the output signal and\nas such define the overall intensity of the noise, whereas higher octaves\ncreate finer-grained details in the noise sequence.\n\nBy default, noise is computed over 4 octaves with each octave contributing\nexactly half as much as its predecessor, starting at 50% strength for the 1st\noctave. This falloff amount can be changed by adding an additional function\nparameter. Eg. a falloff factor of 0.75 means each octave will now have\n75% impact (25% less) of the previous lower octave. Any value between\n0.0 and 1.0 is valid, however, note that values greater than 0.5 might\nresult in greater than 1.0 values returned by noise().\n\nBy changing these values, the signal created by the noise()\nmethod can be adapted to fit very specific needs and characteristics.",
              "type": {
                "text": "[number, number]"
              }
            },
            {
              "kind": "field",
              "name": "noise_seed",
              "description": "Sets the seed value for noise(). By default,\nnoise() produces different results each time\nthe program is run. Set the `seed` value to a constant to return\nthe same pseudo-random numbers each time the software is run.\nIf a seed has not been set, noise_seed will be undefined.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "random_seed",
              "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set random_seed to a constant to return the same\npseudo-random numbers each time the software is run. If a seed has not\nbeen set, random_seed will be undefined.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addMathProps",
          "declaration": {
            "name": "addMathProps",
            "module": "src/properties/math_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/shape_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addWidthHeight",
          "members": [
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the element in pixels.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the element in pixels.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXY",
          "members": [
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ",
          "mixins": [
            {
              "name": "addXY",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "description": "The x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y",
              "description": "The y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z",
              "description": "The z-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXY12",
          "mixins": [
            {
              "name": "addXY1",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addXY2",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXY3",
          "members": [
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100"
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ1",
          "mixins": [
            {
              "name": "addXY1",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ1",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ1",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ2",
          "mixins": [
            {
              "name": "addXY2",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ2",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXY4",
          "members": [
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100"
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "addXY123",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addZ3",
          "members": [
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100"
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ3",
          "mixins": [
            {
              "name": "addXY3",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ3",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ123",
          "mixins": [
            {
              "name": "addXYZ12",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addXY3",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ3",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z1",
              "description": "The first z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXYZ1",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z2",
              "description": "The second z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ2",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z3",
              "description": "The third z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ3",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addZ4",
          "members": [
            {
              "kind": "field",
              "name": "#z4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "z4",
              "description": "The fourth z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addXYZ4",
          "mixins": [
            {
              "name": "addXY4",
              "module": "src/properties/shape_props.js"
            },
            {
              "name": "addZ4",
              "module": "src/properties/shape_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#x4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x4",
              "description": "The fourth x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y4",
              "description": "The fourth y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y1",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x1",
              "description": "The first x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y1",
              "description": "The first y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y2",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x2",
              "description": "The second x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y2",
              "description": "The second y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY12",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#x3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "100",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#y3",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "x3",
              "description": "The third x-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "y3",
              "description": "The third y-coordinate of the element relative to the current anchor.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addXY3",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#z4",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            },
            {
              "kind": "field",
              "name": "z4",
              "description": "The fourth z-coordinate of the element relative to the current anchor. |",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "addZ4",
                "module": "src/properties/shape_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addRectMode",
          "members": [
            {
              "kind": "field",
              "name": "#rect_mode",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"corner\""
            },
            {
              "kind": "field",
              "name": "rect_mode",
              "description": "Modifies the location from which rectangles are drawn by changing the way\nin which x and y coordinates are interpreted.\n\nThe default mode is CORNER, which interprets the x and y as the\nupper-left corner of the shape.\n\nrect_mode=\"CORNERS\" interprets x and y as the location of\none of the corners, and width and height as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not necessary that the first corner be the upper left\ncorner.\n\nrect_mode=\"CENTER\" interprets x and y as the shape's center\npoint.\n\nrect_mode=\"RADIUS\" also uses x and y as the shape's\ncenter\npoint, but uses width and height to specify half of the shape's\nwidth and height respectively.\n\nThe value to this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "CORNER|CORNERS|CENTER|RADIUS"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "add2DStrokeStyling",
          "members": [
            {
              "kind": "field",
              "name": "#smooth",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#stroke_cap",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"round\""
            },
            {
              "kind": "field",
              "name": "#stroke_join",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"miter\""
            },
            {
              "kind": "field",
              "name": "smooth",
              "description": "smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\nimprove image quality of resized images. smooth is true by\ndefault on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\nimages, and fonts.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "stroke_cap",
              "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe value on this property must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "ROUND|SQUARE|PROJECT"
              }
            },
            {
              "kind": "field",
              "name": "stroke_join",
              "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS.",
              "type": {
                "text": "MITER|BEVEL|ROUND"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addCurveTightness",
          "members": [
            {
              "kind": "field",
              "name": "#tightness",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tightness",
              "description": "Modifies the quality of the curve. The amount\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addCXY",
          "members": [
            {
              "kind": "field",
              "name": "#cx",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#cy",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cx"
            },
            {
              "kind": "field",
              "name": "cy"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "addCXYZ",
          "members": [
            {
              "kind": "field",
              "name": "#cz",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cz"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addWidthHeight",
          "declaration": {
            "name": "addWidthHeight",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXY",
          "declaration": {
            "name": "addXY",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ",
          "declaration": {
            "name": "addXYZ",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXY12",
          "declaration": {
            "name": "addXY12",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXY3",
          "declaration": {
            "name": "addXY3",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ1",
          "declaration": {
            "name": "addXYZ1",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ2",
          "declaration": {
            "name": "addXYZ2",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXY4",
          "declaration": {
            "name": "addXY4",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addZ3",
          "declaration": {
            "name": "addZ3",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ3",
          "declaration": {
            "name": "addXYZ3",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ123",
          "declaration": {
            "name": "addXYZ123",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addZ4",
          "declaration": {
            "name": "addZ4",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addXYZ4",
          "declaration": {
            "name": "addXYZ4",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addRectMode",
          "declaration": {
            "name": "addRectMode",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "add2DStrokeStyling",
          "declaration": {
            "name": "add2DStrokeStyling",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addCurveTightness",
          "declaration": {
            "name": "addCurveTightness",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addCXY",
          "declaration": {
            "name": "addCXY",
            "module": "src/properties/shape_props.js"
          }
        },
        {
          "kind": "js",
          "name": "addCXYZ",
          "declaration": {
            "name": "addCXYZ",
            "module": "src/properties/shape_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/transform_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "add2DTransformProps",
          "mixins": [
            {
              "name": "addAnchor",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "add2DAngle",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "addScale",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "addShear",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "addMatrixProps",
              "module": "src/properties/transform_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle",
              "description": "The angle of rotation for the element and its children. The unit for\nangles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add2DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#apply_matrix",
              "privacy": "private",
              "default": "new DOMMatrix()",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#reset_transform",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "apply_transform",
              "description": "Multiplies the current matrix by the one specified through the values.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nIf set to a comma-separated list of numbers, these number will first be\npassed into the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\">\nDOMMatrix</a> constructor.",
              "type": {
                "text": "DOMMatrix"
              },
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "reset_transform",
              "description": "If set to true, this resets the transformations applied to this element,\nits children, and the siblings below this element. This overrides\ntransformation properties such as anchor, angle, scale, and shear.",
              "inheritedFrom": {
                "name": "addMatrixProps",
                "module": "src/properties/transform_props.js"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "add3DTransformProps",
          "mixins": [
            {
              "name": "addAnchor",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "add3DAngle",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "addScale",
              "module": "src/properties/transform_props.js"
            },
            {
              "name": "addShear",
              "module": "src/properties/transform_props.js"
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "default": "new p5.Vector()",
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "This element and its children are positioned and transformed relative to\nthe anchor position.\n\nSetting anchor to one or more comma-separated numbers will result in the\nvalues being passed into create_vector and anchor being set to the\nresulting vector.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addAnchor",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#angle_z",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_x",
              "description": "The angle of rotation along the x-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_y",
              "description": "The angle of rotation along the y-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "angle_z",
              "description": "The angle of rotation along the z-axis for the element and its children.\nThe unit for angles may be set with angle_mode.",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "add3DAngle",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#scale",
              "privacy": "private",
              "default": "new p5.Vector(1, 1, 1)",
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Increases or decreases the size of an element by expanding or contracting\nvertices. Objects always scale from their anchor point. Scale values are\nspecified as decimal percentages.\nFor example, the setting scale=\"2.0\" increases the dimension of a\nshape by 200%.\n\nTransformations apply to this element and its children. Children's\nscale will multiply the effect. For example, setting scale=\"2.0\"\nand then setting scale=\"1.5\" on the child will cause the child to be 3x\nits size.\n\nSetting this to a comma-separated list of numbers will result in those\nvalues being passed into create_vector and the resulting vector being set\nas the scale. Setting this to a single number will set the scale vector\nto that value in the x, y, and z direction.",
              "type": {
                "text": "p5.Vector"
              },
              "inheritedFrom": {
                "name": "addScale",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "#shear_y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_x",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            },
            {
              "kind": "field",
              "name": "shear_y",
              "inheritedFrom": {
                "name": "addShear",
                "module": "src/properties/transform_props.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "add2DTransformProps",
          "declaration": {
            "name": "add2DTransformProps",
            "module": "src/properties/transform_props.js"
          }
        },
        {
          "kind": "js",
          "name": "add3DTransformProps",
          "declaration": {
            "name": "add3DTransformProps",
            "module": "src/properties/transform_props.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/properties/typography_props.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "addTypographyProps",
          "members": [
            {
              "kind": "field",
              "name": "#align",
              "privacy": "private",
              "type": {
                "text": "array"
              },
              "default": "[p5.prototype.LEFT, p5.prototype.BASELINE]"
            },
            {
              "kind": "field",
              "name": "#leading",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "15"
            },
            {
              "kind": "field",
              "name": "#font",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "\"sans-serif\""
            },
            {
              "kind": "field",
              "name": "#font_size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "12"
            },
            {
              "kind": "field",
              "name": "#style",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#wrap",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Sets the current alignment for drawing text. Accepts two\r\nvalues:\r\n- first: horizontal alignment (LEFT, CENTER, or RIGHT)\r\n- scond: vertical alignment (TOP, BOTTOM, CENTER, or BASELINE).\r\n\r\nSo if you set align=\"LEFT\", you are aligning the left\r\nedge of your text to this element's x-coordinate.\r\nIf you write align=\"RIGHT, TOP\", you are aligning the right edge\r\nof your text to this element's x-coordinate and the top edge of the text\r\nto this element's y-coordinate.",
              "type": {
                "text": "[LEFT|CENTER|RIGHT, TOP|BOTTOM|CENTER|BASELINE]"
              }
            },
            {
              "kind": "field",
              "name": "leading",
              "description": "Sets the spacing, in pixels, between lines of text.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "font",
              "description": "The current font used by this element. This may be set to a font loaded\r\nwith load_font() or a string representing a\r\n<a href=\"https://mzl.la/2dOw8WD\">web safe font</a>.",
              "type": {
                "text": "p5.Font"
              }
            },
            {
              "kind": "field",
              "name": "font_size",
              "description": "The font size in pixels.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "style",
              "description": "The style for text.",
              "type": {
                "text": "NORMAL|ITALIC|BOLDITALIC"
              }
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Specifies how lines of text are wrapped within a text box. This requires\r\nwidth to be set on this element.\r\n\r\nWORD wrap style only breaks lines at spaces. A single string without spaces\r\nthat exceeds the boundaries of the canvas or text area is not truncated,\r\nand will overflow the desired area, disappearing at the canvas edge.\r\n\r\nCHAR wrap style breaks lines wherever needed to stay within the text box.\r\n\r\nWORD is the default wrap style, and both styles will still break lines at\r\nany line breaks specified in the original text. The text height property also\r\nstill applies to wrapped text in both styles, lines of text that do not fit\r\nwithin the text area will not be drawn to the screen.",
              "type": {
                "text": "WORD|CHAR"
              }
            },
            {
              "kind": "field",
              "name": "ascent",
              "description": "The ascent of the current font at its current size. The ascent represents the\r\ndistance, in pixels, of the tallest character above the baseline. (read-only)",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "descent",
              "description": "The descent of the current font at its current size. The descent represents the\r\ndistance, in pixels, of the character with the longest descender below the baseline.\r\n(read-only)",
              "type": {
                "text": "number"
              }
            }
          ],
          "parameters": [
            {
              "name": "baseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addTypographyProps",
          "declaration": {
            "name": "addTypographyProps",
            "module": "src/properties/typography_props.js"
          }
        }
      ]
    }
  ]
}
